{"ast":null,"code":"'use strict';\n\nconst Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXECUTE_WITH_SELECTION: Symbol('EXECUTE_WITH_SELECTION'),\n  NO_INHERIT_OPTIONS: Symbol('NO_INHERIT_OPTIONS')\n};\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n */\n\nclass OperationBase {\n  constructor(options) {\n    this.options = Object.assign({}, options);\n  }\n\n  hasAspect(aspect) {\n    if (this.constructor.aspects == null) {\n      return false;\n    }\n\n    return this.constructor.aspects.has(aspect);\n  }\n\n  set session(session) {\n    Object.assign(this.options, {\n      session\n    });\n  }\n\n  get session() {\n    return this.options.session;\n  }\n\n  clearSession() {\n    delete this.options.session;\n  }\n\n  get canRetryRead() {\n    return true;\n  }\n\n  execute() {\n    throw new TypeError('`execute` must be implemented for OperationBase subclasses');\n  }\n\n}\n\nfunction defineAspects(operation, aspects) {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n  return aspects;\n}\n\nmodule.exports = {\n  Aspect,\n  defineAspects,\n  OperationBase\n};","map":{"version":3,"sources":["/Users/rohanvarshney/Google Drive/GitHub/LostThenFound/lost-then-found/client/node_modules/mongodb/lib/operations/operation.js"],"names":["Aspect","READ_OPERATION","Symbol","WRITE_OPERATION","RETRYABLE","EXECUTE_WITH_SELECTION","NO_INHERIT_OPTIONS","OperationBase","constructor","options","Object","assign","hasAspect","aspect","aspects","has","session","clearSession","canRetryRead","execute","TypeError","defineAspects","operation","Array","isArray","Set","defineProperty","value","writable","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAG;AACbC,EAAAA,cAAc,EAAEC,MAAM,CAAC,gBAAD,CADT;AAEbC,EAAAA,eAAe,EAAED,MAAM,CAAC,iBAAD,CAFV;AAGbE,EAAAA,SAAS,EAAEF,MAAM,CAAC,WAAD,CAHJ;AAIbG,EAAAA,sBAAsB,EAAEH,MAAM,CAAC,wBAAD,CAJjB;AAKbI,EAAAA,kBAAkB,EAAEJ,MAAM,CAAC,oBAAD;AALb,CAAf;AAQA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMK,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,OAAlB,CAAf;AACD;;AAEDG,EAAAA,SAAS,CAACC,MAAD,EAAS;AAChB,QAAI,KAAKL,WAAL,CAAiBM,OAAjB,IAA4B,IAAhC,EAAsC;AACpC,aAAO,KAAP;AACD;;AACD,WAAO,KAAKN,WAAL,CAAiBM,OAAjB,CAAyBC,GAAzB,CAA6BF,MAA7B,CAAP;AACD;;AAED,MAAIG,OAAJ,CAAYA,OAAZ,EAAqB;AACnBN,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKF,OAAnB,EAA4B;AAAEO,MAAAA;AAAF,KAA5B;AACD;;AAED,MAAIA,OAAJ,GAAc;AACZ,WAAO,KAAKP,OAAL,CAAaO,OAApB;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKR,OAAL,CAAaO,OAApB;AACD;;AAED,MAAIE,YAAJ,GAAmB;AACjB,WAAO,IAAP;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,UAAM,IAAIC,SAAJ,CAAc,4DAAd,CAAN;AACD;;AA9BiB;;AAiCpB,SAASC,aAAT,CAAuBC,SAAvB,EAAkCR,OAAlC,EAA2C;AACzC,MAAI,CAACS,KAAK,CAACC,OAAN,CAAcV,OAAd,CAAD,IAA2B,EAAEA,OAAO,YAAYW,GAArB,CAA/B,EAA0D;AACxDX,IAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AACDA,EAAAA,OAAO,GAAG,IAAIW,GAAJ,CAAQX,OAAR,CAAV;AACAJ,EAAAA,MAAM,CAACgB,cAAP,CAAsBJ,SAAtB,EAAiC,SAAjC,EAA4C;AAC1CK,IAAAA,KAAK,EAAEb,OADmC;AAE1Cc,IAAAA,QAAQ,EAAE;AAFgC,GAA5C;AAIA,SAAOd,OAAP;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiB;AACf9B,EAAAA,MADe;AAEfqB,EAAAA,aAFe;AAGfd,EAAAA;AAHe,CAAjB","sourcesContent":["'use strict';\n\nconst Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXECUTE_WITH_SELECTION: Symbol('EXECUTE_WITH_SELECTION'),\n  NO_INHERIT_OPTIONS: Symbol('NO_INHERIT_OPTIONS')\n};\n\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n */\nclass OperationBase {\n  constructor(options) {\n    this.options = Object.assign({}, options);\n  }\n\n  hasAspect(aspect) {\n    if (this.constructor.aspects == null) {\n      return false;\n    }\n    return this.constructor.aspects.has(aspect);\n  }\n\n  set session(session) {\n    Object.assign(this.options, { session });\n  }\n\n  get session() {\n    return this.options.session;\n  }\n\n  clearSession() {\n    delete this.options.session;\n  }\n\n  get canRetryRead() {\n    return true;\n  }\n\n  execute() {\n    throw new TypeError('`execute` must be implemented for OperationBase subclasses');\n  }\n}\n\nfunction defineAspects(operation, aspects) {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n  return aspects;\n}\n\nmodule.exports = {\n  Aspect,\n  defineAspects,\n  OperationBase\n};\n"]},"metadata":{},"sourceType":"script"}