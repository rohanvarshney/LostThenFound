{"ast":null,"code":"'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst updateDocuments = require('./common_functions').updateDocuments;\n\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nclass UpdateOneOperation extends OperationBase {\n  constructor(collection, filter, update, options) {\n    super(options);\n\n    if (!hasAtomicOperators(update)) {\n      throw new TypeError('Update document requires atomic operators');\n    }\n\n    this.collection = collection;\n    this.filter = filter;\n    this.update = update;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const filter = this.filter;\n    const update = this.update;\n    const options = this.options; // Set single document update\n\n    options.multi = false; // Execute update\n\n    updateDocuments(coll, filter, update, options, (err, r) => updateCallback(err, r, callback));\n  }\n\n}\n\nfunction updateCallback(err, r, callback) {\n  if (callback == null) return;\n  if (err) return callback(err);\n  if (r == null) return callback(null, {\n    result: {\n      ok: 1\n    }\n  });\n  r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n  r.upsertedId = Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? r.result.upserted[0] // FIXME(major): should be `r.result.upserted[0]._id`\n  : null;\n  r.upsertedCount = Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n  r.matchedCount = Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n  callback(null, r);\n}\n\nmodule.exports = UpdateOneOperation;","map":{"version":3,"sources":["/Users/rohanvarshney/Google Drive/GitHub/LostThenFound/lost-then-found/client/node_modules/mongodb/lib/operations/update_one.js"],"names":["OperationBase","require","updateDocuments","hasAtomicOperators","UpdateOneOperation","constructor","collection","filter","update","options","TypeError","execute","callback","coll","multi","err","r","updateCallback","result","ok","modifiedCount","nModified","n","upsertedId","Array","isArray","upserted","length","upsertedCount","matchedCount","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,aAA7C;;AACA,MAAME,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAAP,CAA8BC,eAAtD;;AACA,MAAMC,kBAAkB,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBE,kBAA/C;;AAEA,MAAMC,kBAAN,SAAiCJ,aAAjC,CAA+C;AAC7CK,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqBC,MAArB,EAA6BC,OAA7B,EAAsC;AAC/C,UAAMA,OAAN;;AAEA,QAAI,CAACN,kBAAkB,CAACK,MAAD,CAAvB,EAAiC;AAC/B,YAAM,IAAIE,SAAJ,CAAc,2CAAd,CAAN;AACD;;AAED,SAAKJ,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAEDG,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMC,IAAI,GAAG,KAAKP,UAAlB;AACA,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB,CAJgB,CAMhB;;AACAA,IAAAA,OAAO,CAACK,KAAR,GAAgB,KAAhB,CAPgB,CAQhB;;AACAZ,IAAAA,eAAe,CAACW,IAAD,EAAON,MAAP,EAAeC,MAAf,EAAuBC,OAAvB,EAAgC,CAACM,GAAD,EAAMC,CAAN,KAAYC,cAAc,CAACF,GAAD,EAAMC,CAAN,EAASJ,QAAT,CAA1D,CAAf;AACD;;AAvB4C;;AA0B/C,SAASK,cAAT,CAAwBF,GAAxB,EAA6BC,CAA7B,EAAgCJ,QAAhC,EAA0C;AACxC,MAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACtB,MAAIG,GAAJ,EAAS,OAAOH,QAAQ,CAACG,GAAD,CAAf;AACT,MAAIC,CAAC,IAAI,IAAT,EAAe,OAAOJ,QAAQ,CAAC,IAAD,EAAO;AAAEM,IAAAA,MAAM,EAAE;AAAEC,MAAAA,EAAE,EAAE;AAAN;AAAV,GAAP,CAAf;AACfH,EAAAA,CAAC,CAACI,aAAF,GAAkBJ,CAAC,CAACE,MAAF,CAASG,SAAT,IAAsB,IAAtB,GAA6BL,CAAC,CAACE,MAAF,CAASG,SAAtC,GAAkDL,CAAC,CAACE,MAAF,CAASI,CAA7E;AACAN,EAAAA,CAAC,CAACO,UAAF,GACEC,KAAK,CAACC,OAAN,CAAcT,CAAC,CAACE,MAAF,CAASQ,QAAvB,KAAoCV,CAAC,CAACE,MAAF,CAASQ,QAAT,CAAkBC,MAAlB,GAA2B,CAA/D,GACIX,CAAC,CAACE,MAAF,CAASQ,QAAT,CAAkB,CAAlB,CADJ,CACyB;AADzB,IAEI,IAHN;AAIAV,EAAAA,CAAC,CAACY,aAAF,GACEJ,KAAK,CAACC,OAAN,CAAcT,CAAC,CAACE,MAAF,CAASQ,QAAvB,KAAoCV,CAAC,CAACE,MAAF,CAASQ,QAAT,CAAkBC,MAAtD,GAA+DX,CAAC,CAACE,MAAF,CAASQ,QAAT,CAAkBC,MAAjF,GAA0F,CAD5F;AAEAX,EAAAA,CAAC,CAACa,YAAF,GACEL,KAAK,CAACC,OAAN,CAAcT,CAAC,CAACE,MAAF,CAASQ,QAAvB,KAAoCV,CAAC,CAACE,MAAF,CAASQ,QAAT,CAAkBC,MAAlB,GAA2B,CAA/D,GAAmE,CAAnE,GAAuEX,CAAC,CAACE,MAAF,CAASI,CADlF;AAEAV,EAAAA,QAAQ,CAAC,IAAD,EAAOI,CAAP,CAAR;AACD;;AAEDc,MAAM,CAACC,OAAP,GAAiB3B,kBAAjB","sourcesContent":["'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\nconst updateDocuments = require('./common_functions').updateDocuments;\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nclass UpdateOneOperation extends OperationBase {\n  constructor(collection, filter, update, options) {\n    super(options);\n\n    if (!hasAtomicOperators(update)) {\n      throw new TypeError('Update document requires atomic operators');\n    }\n\n    this.collection = collection;\n    this.filter = filter;\n    this.update = update;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const filter = this.filter;\n    const update = this.update;\n    const options = this.options;\n\n    // Set single document update\n    options.multi = false;\n    // Execute update\n    updateDocuments(coll, filter, update, options, (err, r) => updateCallback(err, r, callback));\n  }\n}\n\nfunction updateCallback(err, r, callback) {\n  if (callback == null) return;\n  if (err) return callback(err);\n  if (r == null) return callback(null, { result: { ok: 1 } });\n  r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n  r.upsertedId =\n    Array.isArray(r.result.upserted) && r.result.upserted.length > 0\n      ? r.result.upserted[0] // FIXME(major): should be `r.result.upserted[0]._id`\n      : null;\n  r.upsertedCount =\n    Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n  r.matchedCount =\n    Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n  callback(null, r);\n}\n\nmodule.exports = UpdateOneOperation;\n"]},"metadata":{},"sourceType":"script"}