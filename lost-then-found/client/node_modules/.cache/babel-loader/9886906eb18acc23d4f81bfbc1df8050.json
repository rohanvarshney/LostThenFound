{"ast":null,"code":"'use strict';\n\nconst deprecate = require('util').deprecate;\n\nconst Logger = require('../core').Logger;\n\nconst MongoCredentials = require('../core').MongoCredentials;\n\nconst MongoError = require('../core').MongoError;\n\nconst Mongos = require('../topologies/mongos');\n\nconst NativeTopology = require('../topologies/native_topology');\n\nconst parse = require('../core').parseConnectionString;\n\nconst ReadConcern = require('../read_concern');\n\nconst ReadPreference = require('../core').ReadPreference;\n\nconst ReplSet = require('../topologies/replset');\n\nconst Server = require('../topologies/server');\n\nconst ServerSessionPool = require('../core').Sessions.ServerSessionPool;\n\nconst emitDeprecationWarning = require('../utils').emitDeprecationWarning;\n\nconst fs = require('fs');\n\nconst BSON = require('../core/connection/utils').retrieveBSON();\n\nconst CMAP_EVENT_NAMES = require('../cmap/events').CMAP_EVENT_NAMES;\n\nlet client;\n\nfunction loadClient() {\n  if (!client) {\n    client = require('../mongo_client');\n  }\n\n  return client;\n}\n\nconst legacyParse = deprecate(require('../url_parser'), 'current URL string parser is deprecated, and will be removed in a future version. ' + 'To use the new parser, pass option { useNewUrlParser: true } to MongoClient.connect.');\nconst AUTH_MECHANISM_INTERNAL_MAP = {\n  DEFAULT: 'default',\n  PLAIN: 'plain',\n  GSSAPI: 'gssapi',\n  'MONGODB-CR': 'mongocr',\n  'MONGODB-X509': 'x509',\n  'MONGODB-AWS': 'mongodb-aws',\n  'SCRAM-SHA-1': 'scram-sha-1',\n  'SCRAM-SHA-256': 'scram-sha-256'\n};\nconst monitoringEvents = ['timeout', 'close', 'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'serverClosed', 'topologyOpening', 'topologyClosed', 'topologyDescriptionChanged', 'commandStarted', 'commandSucceeded', 'commandFailed', 'joined', 'left', 'ping', 'ha', 'all', 'fullsetup', 'open'];\nconst VALID_AUTH_MECHANISMS = new Set(['DEFAULT', 'PLAIN', 'GSSAPI', 'MONGODB-CR', 'MONGODB-X509', 'MONGODB-AWS', 'SCRAM-SHA-1', 'SCRAM-SHA-256']);\nconst validOptionNames = ['poolSize', 'ssl', 'sslValidate', 'sslCA', 'sslCert', 'sslKey', 'sslPass', 'sslCRL', 'autoReconnect', 'noDelay', 'keepAlive', 'keepAliveInitialDelay', 'connectTimeoutMS', 'family', 'socketTimeoutMS', 'reconnectTries', 'reconnectInterval', 'ha', 'haInterval', 'replicaSet', 'secondaryAcceptableLatencyMS', 'acceptableLatencyMS', 'connectWithNoPrimary', 'authSource', 'w', 'wtimeout', 'j', 'forceServerObjectId', 'serializeFunctions', 'ignoreUndefined', 'raw', 'bufferMaxEntries', 'readPreference', 'pkFactory', 'promiseLibrary', 'readConcern', 'maxStalenessSeconds', 'loggerLevel', 'logger', 'promoteValues', 'promoteBuffers', 'promoteLongs', 'domainsEnabled', 'checkServerIdentity', 'validateOptions', 'appname', 'auth', 'user', 'password', 'authMechanism', 'compression', 'fsync', 'readPreferenceTags', 'numberOfRetries', 'auto_reconnect', 'minSize', 'monitorCommands', 'retryWrites', 'retryReads', 'useNewUrlParser', 'useUnifiedTopology', 'serverSelectionTimeoutMS', 'useRecoveryToken', 'autoEncryption', 'driverInfo', 'tls', 'tlsInsecure', 'tlsinsecure', 'tlsAllowInvalidCertificates', 'tlsAllowInvalidHostnames', 'tlsCAFile', 'tlsCertificateFile', 'tlsCertificateKeyFile', 'tlsCertificateKeyFilePassword', 'minHeartbeatFrequencyMS', 'heartbeatFrequencyMS', 'directConnection', 'appName', // CMAP options\n'maxPoolSize', 'minPoolSize', 'maxIdleTimeMS', 'waitQueueTimeoutMS'];\nconst ignoreOptionNames = ['native_parser'];\nconst legacyOptionNames = ['server', 'replset', 'replSet', 'mongos', 'db']; // Validate options object\n\nfunction validOptions(options) {\n  const _validOptions = validOptionNames.concat(legacyOptionNames);\n\n  for (const name in options) {\n    if (ignoreOptionNames.indexOf(name) !== -1) {\n      continue;\n    }\n\n    if (_validOptions.indexOf(name) === -1) {\n      if (options.validateOptions) {\n        return new MongoError(`option ${name} is not supported`);\n      } else {\n        console.warn(`the options [${name}] is not supported`);\n      }\n    }\n\n    if (legacyOptionNames.indexOf(name) !== -1) {\n      console.warn(`the server/replset/mongos/db options are deprecated, ` + `all their options are supported at the top level of the options object [${validOptionNames}]`);\n    }\n  }\n}\n\nconst LEGACY_OPTIONS_MAP = validOptionNames.reduce((obj, name) => {\n  obj[name.toLowerCase()] = name;\n  return obj;\n}, {});\n\nfunction addListeners(mongoClient, topology) {\n  topology.on('authenticated', createListener(mongoClient, 'authenticated'));\n  topology.on('error', createListener(mongoClient, 'error'));\n  topology.on('timeout', createListener(mongoClient, 'timeout'));\n  topology.on('close', createListener(mongoClient, 'close'));\n  topology.on('parseError', createListener(mongoClient, 'parseError'));\n  topology.once('open', createListener(mongoClient, 'open'));\n  topology.once('fullsetup', createListener(mongoClient, 'fullsetup'));\n  topology.once('all', createListener(mongoClient, 'all'));\n  topology.on('reconnect', createListener(mongoClient, 'reconnect'));\n}\n\nfunction assignTopology(client, topology) {\n  client.topology = topology;\n\n  if (!(topology instanceof NativeTopology)) {\n    topology.s.sessionPool = new ServerSessionPool(topology.s.coreTopology);\n  }\n} // Clear out all events\n\n\nfunction clearAllEvents(topology) {\n  monitoringEvents.forEach(event => topology.removeAllListeners(event));\n} // Collect all events in order from SDAM\n\n\nfunction collectEvents(mongoClient, topology) {\n  let MongoClient = loadClient();\n  const collectedEvents = [];\n\n  if (mongoClient instanceof MongoClient) {\n    monitoringEvents.forEach(event => {\n      topology.on(event, (object1, object2) => {\n        if (event === 'open') {\n          collectedEvents.push({\n            event: event,\n            object1: mongoClient\n          });\n        } else {\n          collectedEvents.push({\n            event: event,\n            object1: object1,\n            object2: object2\n          });\n        }\n      });\n    });\n  }\n\n  return collectedEvents;\n}\n\nfunction resolveTLSOptions(options) {\n  if (options.tls == null) {\n    return;\n  }\n\n  ['sslCA', 'sslKey', 'sslCert'].forEach(optionName => {\n    if (options[optionName]) {\n      options[optionName] = fs.readFileSync(options[optionName]);\n    }\n  });\n}\n\nconst emitDeprecationForNonUnifiedTopology = deprecate(() => {}, 'current Server Discovery and Monitoring engine is deprecated, and will be removed in a future version. ' + 'To use the new Server Discover and Monitoring engine, pass option { useUnifiedTopology: true } to the MongoClient constructor.');\n\nfunction connect(mongoClient, url, options, callback) {\n  options = Object.assign({}, options); // If callback is null throw an exception\n\n  if (callback == null) {\n    throw new Error('no callback function provided');\n  }\n\n  let didRequestAuthentication = false;\n  const logger = Logger('MongoClient', options); // Did we pass in a Server/ReplSet/Mongos\n\n  if (url instanceof Server || url instanceof ReplSet || url instanceof Mongos) {\n    return connectWithUrl(mongoClient, url, options, connectCallback);\n  }\n\n  const useNewUrlParser = options.useNewUrlParser !== false;\n  const parseFn = useNewUrlParser ? parse : legacyParse;\n  const transform = useNewUrlParser ? transformUrlOptions : legacyTransformUrlOptions;\n  parseFn(url, options, (err, _object) => {\n    // Do not attempt to connect if parsing error\n    if (err) return callback(err); // Flatten\n\n    const object = transform(_object); // Parse the string\n\n    const _finalOptions = createUnifiedOptions(object, options); // Check if we have connection and socket timeout set\n\n\n    if (_finalOptions.socketTimeoutMS == null) _finalOptions.socketTimeoutMS = 0;\n    if (_finalOptions.connectTimeoutMS == null) _finalOptions.connectTimeoutMS = 10000;\n    if (_finalOptions.retryWrites == null) _finalOptions.retryWrites = true;\n    if (_finalOptions.useRecoveryToken == null) _finalOptions.useRecoveryToken = true;\n    if (_finalOptions.readPreference == null) _finalOptions.readPreference = 'primary';\n\n    if (_finalOptions.db_options && _finalOptions.db_options.auth) {\n      delete _finalOptions.db_options.auth;\n    } // `journal` should be translated to `j` for the driver\n\n\n    if (_finalOptions.journal != null) {\n      _finalOptions.j = _finalOptions.journal;\n      _finalOptions.journal = undefined;\n    } // resolve tls options if needed\n\n\n    resolveTLSOptions(_finalOptions); // Store the merged options object\n\n    mongoClient.s.options = _finalOptions; // Failure modes\n\n    if (object.servers.length === 0) {\n      return callback(new Error('connection string must contain at least one seed host'));\n    }\n\n    if (_finalOptions.auth && !_finalOptions.credentials) {\n      try {\n        didRequestAuthentication = true;\n        _finalOptions.credentials = generateCredentials(mongoClient, _finalOptions.auth.user, _finalOptions.auth.password, _finalOptions);\n      } catch (err) {\n        return callback(err);\n      }\n    }\n\n    if (_finalOptions.useUnifiedTopology) {\n      return createTopology(mongoClient, 'unified', _finalOptions, connectCallback);\n    }\n\n    emitDeprecationForNonUnifiedTopology(); // Do we have a replicaset then skip discovery and go straight to connectivity\n\n    if (_finalOptions.replicaSet || _finalOptions.rs_name) {\n      return createTopology(mongoClient, 'replicaset', _finalOptions, connectCallback);\n    } else if (object.servers.length > 1) {\n      return createTopology(mongoClient, 'mongos', _finalOptions, connectCallback);\n    } else {\n      return createServer(mongoClient, _finalOptions, connectCallback);\n    }\n  });\n\n  function connectCallback(err, topology) {\n    const warningMessage = `seed list contains no mongos proxies, replicaset connections requires the parameter replicaSet to be supplied in the URI or options object, mongodb://server:port/db?replicaSet=name`;\n\n    if (err && err.message === 'no mongos proxies found in seed list') {\n      if (logger.isWarn()) {\n        logger.warn(warningMessage);\n      } // Return a more specific error message for MongoClient.connect\n\n\n      return callback(new MongoError(warningMessage));\n    }\n\n    if (didRequestAuthentication) {\n      mongoClient.emit('authenticated', null, true);\n    } // Return the error and db instance\n\n\n    callback(err, topology);\n  }\n}\n\nfunction connectWithUrl(mongoClient, url, options, connectCallback) {\n  // Set the topology\n  assignTopology(mongoClient, url); // Add listeners\n\n  addListeners(mongoClient, url); // Propagate the events to the client\n\n  relayEvents(mongoClient, url);\n  let finalOptions = Object.assign({}, options); // If we have a readPreference passed in by the db options, convert it from a string\n\n  if (typeof options.readPreference === 'string' || typeof options.read_preference === 'string') {\n    finalOptions.readPreference = new ReadPreference(options.readPreference || options.read_preference);\n  }\n\n  const isDoingAuth = finalOptions.user || finalOptions.password || finalOptions.authMechanism;\n\n  if (isDoingAuth && !finalOptions.credentials) {\n    try {\n      finalOptions.credentials = generateCredentials(mongoClient, finalOptions.user, finalOptions.password, finalOptions);\n    } catch (err) {\n      return connectCallback(err, url);\n    }\n  }\n\n  return url.connect(finalOptions, connectCallback);\n}\n\nfunction createListener(mongoClient, event) {\n  const eventSet = new Set(['all', 'fullsetup', 'open', 'reconnect']);\n  return (v1, v2) => {\n    if (eventSet.has(event)) {\n      return mongoClient.emit(event, mongoClient);\n    }\n\n    mongoClient.emit(event, v1, v2);\n  };\n}\n\nfunction createServer(mongoClient, options, callback) {\n  // Pass in the promise library\n  options.promiseLibrary = mongoClient.s.promiseLibrary; // Set default options\n\n  const servers = translateOptions(options);\n  const server = servers[0]; // Propagate the events to the client\n\n  const collectedEvents = collectEvents(mongoClient, server); // Connect to topology\n\n  server.connect(options, (err, topology) => {\n    if (err) {\n      server.close(true);\n      return callback(err);\n    } // Clear out all the collected event listeners\n\n\n    clearAllEvents(server); // Relay all the events\n\n    relayEvents(mongoClient, server); // Add listeners\n\n    addListeners(mongoClient, server); // Check if we are really speaking to a mongos\n\n    const ismaster = topology.lastIsMaster(); // Set the topology\n\n    assignTopology(mongoClient, topology); // Do we actually have a mongos\n\n    if (ismaster && ismaster.msg === 'isdbgrid') {\n      // Destroy the current connection\n      topology.close(); // Create mongos connection instead\n\n      return createTopology(mongoClient, 'mongos', options, callback);\n    } // Fire all the events\n\n\n    replayEvents(mongoClient, collectedEvents); // Otherwise callback\n\n    callback(err, topology);\n  });\n}\n\nconst DEPRECATED_UNIFIED_EVENTS = new Set(['reconnect', 'reconnectFailed', 'attemptReconnect', 'joined', 'left', 'ping', 'ha', 'all', 'fullsetup', 'open']);\n\nfunction registerDeprecatedEventNotifiers(client) {\n  client.on('newListener', eventName => {\n    if (DEPRECATED_UNIFIED_EVENTS.has(eventName)) {\n      emitDeprecationWarning(`The \\`${eventName}\\` event is no longer supported by the unified topology, please read more by visiting http://bit.ly/2D8WfT6`, 'DeprecationWarning');\n    }\n  });\n}\n\nfunction createTopology(mongoClient, topologyType, options, callback) {\n  // Pass in the promise library\n  options.promiseLibrary = mongoClient.s.promiseLibrary;\n  const translationOptions = {};\n  if (topologyType === 'unified') translationOptions.createServers = false; // Set default options\n\n  const servers = translateOptions(options, translationOptions); // determine CSFLE support\n\n  if (options.autoEncryption != null) {\n    let AutoEncrypter;\n\n    try {\n      require.resolve('mongodb-client-encryption');\n    } catch (err) {\n      callback(new MongoError('Auto-encryption requested, but the module is not installed. Please add `mongodb-client-encryption` as a dependency of your project'));\n      return;\n    }\n\n    try {\n      let mongodbClientEncryption = require('mongodb-client-encryption');\n\n      if (typeof mongodbClientEncryption.extension !== 'function') {\n        callback(new MongoError('loaded version of `mongodb-client-encryption` does not have property `extension`. Please make sure you are loading the correct version of `mongodb-client-encryption`'));\n      }\n\n      AutoEncrypter = mongodbClientEncryption.extension(require('../../index')).AutoEncrypter;\n    } catch (err) {\n      callback(err);\n      return;\n    }\n\n    const mongoCryptOptions = Object.assign({\n      bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp])\n    }, options.autoEncryption);\n    options.autoEncrypter = new AutoEncrypter(mongoClient, mongoCryptOptions);\n  } // Create the topology\n\n\n  let topology;\n\n  if (topologyType === 'mongos') {\n    topology = new Mongos(servers, options);\n  } else if (topologyType === 'replicaset') {\n    topology = new ReplSet(servers, options);\n  } else if (topologyType === 'unified') {\n    topology = new NativeTopology(options.servers, options);\n    registerDeprecatedEventNotifiers(mongoClient);\n  } // Add listeners\n\n\n  addListeners(mongoClient, topology); // Propagate the events to the client\n\n  relayEvents(mongoClient, topology); // Open the connection\n\n  assignTopology(mongoClient, topology); // initialize CSFLE if requested\n\n  if (options.autoEncrypter) {\n    options.autoEncrypter.init(err => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      topology.connect(options, err => {\n        if (err) {\n          topology.close(true);\n          callback(err);\n          return;\n        }\n\n        callback(undefined, topology);\n      });\n    });\n    return;\n  } // otherwise connect normally\n\n\n  topology.connect(options, err => {\n    if (err) {\n      topology.close(true);\n      return callback(err);\n    }\n\n    callback(undefined, topology);\n    return;\n  });\n}\n\nfunction createUnifiedOptions(finalOptions, options) {\n  const childOptions = ['mongos', 'server', 'db', 'replset', 'db_options', 'server_options', 'rs_options', 'mongos_options'];\n  const noMerge = ['readconcern', 'compression', 'autoencryption'];\n\n  for (const name in options) {\n    if (noMerge.indexOf(name.toLowerCase()) !== -1) {\n      finalOptions[name] = options[name];\n    } else if (childOptions.indexOf(name.toLowerCase()) !== -1) {\n      finalOptions = mergeOptions(finalOptions, options[name], false);\n    } else {\n      if (options[name] && typeof options[name] === 'object' && !Buffer.isBuffer(options[name]) && !Array.isArray(options[name])) {\n        finalOptions = mergeOptions(finalOptions, options[name], true);\n      } else {\n        finalOptions[name] = options[name];\n      }\n    }\n  }\n\n  return finalOptions;\n}\n\nfunction generateCredentials(client, username, password, options) {\n  options = Object.assign({}, options); // the default db to authenticate against is 'self'\n  // if authententicate is called from a retry context, it may be another one, like admin\n\n  const source = options.authSource || options.authdb || options.dbName; // authMechanism\n\n  const authMechanismRaw = options.authMechanism || 'DEFAULT';\n  const authMechanism = authMechanismRaw.toUpperCase();\n  const mechanismProperties = options.authMechanismProperties;\n\n  if (!VALID_AUTH_MECHANISMS.has(authMechanism)) {\n    throw MongoError.create({\n      message: `authentication mechanism ${authMechanismRaw} not supported', options.authMechanism`,\n      driver: true\n    });\n  }\n\n  return new MongoCredentials({\n    mechanism: AUTH_MECHANISM_INTERNAL_MAP[authMechanism],\n    mechanismProperties,\n    source,\n    username,\n    password\n  });\n}\n\nfunction legacyTransformUrlOptions(object) {\n  return mergeOptions(createUnifiedOptions({}, object), object, false);\n}\n\nfunction mergeOptions(target, source, flatten) {\n  for (const name in source) {\n    if (source[name] && typeof source[name] === 'object' && flatten) {\n      target = mergeOptions(target, source[name], flatten);\n    } else {\n      target[name] = source[name];\n    }\n  }\n\n  return target;\n}\n\nfunction relayEvents(mongoClient, topology) {\n  const serverOrCommandEvents = [// APM\n  'commandStarted', 'commandSucceeded', 'commandFailed', // SDAM\n  'serverOpening', 'serverClosed', 'serverDescriptionChanged', 'serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'topologyOpening', 'topologyClosed', 'topologyDescriptionChanged', // Legacy\n  'joined', 'left', 'ping', 'ha'].concat(CMAP_EVENT_NAMES);\n  serverOrCommandEvents.forEach(event => {\n    topology.on(event, (object1, object2) => {\n      mongoClient.emit(event, object1, object2);\n    });\n  });\n} //\n// Replay any events due to single server connection switching to Mongos\n//\n\n\nfunction replayEvents(mongoClient, events) {\n  for (let i = 0; i < events.length; i++) {\n    mongoClient.emit(events[i].event, events[i].object1, events[i].object2);\n  }\n}\n\nfunction transformUrlOptions(_object) {\n  let object = Object.assign({\n    servers: _object.hosts\n  }, _object.options);\n\n  for (let name in object) {\n    const camelCaseName = LEGACY_OPTIONS_MAP[name];\n\n    if (camelCaseName) {\n      object[camelCaseName] = object[name];\n    }\n  }\n\n  const hasUsername = _object.auth && _object.auth.username;\n  const hasAuthMechanism = _object.options && _object.options.authMechanism;\n\n  if (hasUsername || hasAuthMechanism) {\n    object.auth = Object.assign({}, _object.auth);\n\n    if (object.auth.db) {\n      object.authSource = object.authSource || object.auth.db;\n    }\n\n    if (object.auth.username) {\n      object.auth.user = object.auth.username;\n    }\n  }\n\n  if (_object.defaultDatabase) {\n    object.dbName = _object.defaultDatabase;\n  }\n\n  if (object.maxPoolSize) {\n    object.poolSize = object.maxPoolSize;\n  }\n\n  if (object.readConcernLevel) {\n    object.readConcern = new ReadConcern(object.readConcernLevel);\n  }\n\n  if (object.wTimeoutMS) {\n    object.wtimeout = object.wTimeoutMS;\n  }\n\n  if (_object.srvHost) {\n    object.srvHost = _object.srvHost;\n  }\n\n  return object;\n}\n\nfunction translateOptions(options, translationOptions) {\n  translationOptions = Object.assign({}, {\n    createServers: true\n  }, translationOptions); // If we have a readPreference passed in by the db options\n\n  if (typeof options.readPreference === 'string' || typeof options.read_preference === 'string') {\n    options.readPreference = new ReadPreference(options.readPreference || options.read_preference);\n  } // Do we have readPreference tags, add them\n\n\n  if (options.readPreference && (options.readPreferenceTags || options.read_preference_tags)) {\n    options.readPreference.tags = options.readPreferenceTags || options.read_preference_tags;\n  } // Do we have maxStalenessSeconds\n\n\n  if (options.maxStalenessSeconds) {\n    options.readPreference.maxStalenessSeconds = options.maxStalenessSeconds;\n  } // Set the socket and connection timeouts\n\n\n  if (options.socketTimeoutMS == null) options.socketTimeoutMS = 0;\n  if (options.connectTimeoutMS == null) options.connectTimeoutMS = 10000;\n\n  if (!translationOptions.createServers) {\n    return;\n  } // Create server instances\n\n\n  return options.servers.map(serverObj => {\n    return serverObj.domain_socket ? new Server(serverObj.domain_socket, 27017, options) : new Server(serverObj.host, serverObj.port, options);\n  });\n}\n\nmodule.exports = {\n  validOptions,\n  connect\n};","map":{"version":3,"sources":["/Users/rohanvarshney/Google Drive/GitHub/LostThenFound/lost-then-found/node_modules/mongodb/lib/operations/connect.js"],"names":["deprecate","require","Logger","MongoCredentials","MongoError","Mongos","NativeTopology","parse","parseConnectionString","ReadConcern","ReadPreference","ReplSet","Server","ServerSessionPool","Sessions","emitDeprecationWarning","fs","BSON","retrieveBSON","CMAP_EVENT_NAMES","client","loadClient","legacyParse","AUTH_MECHANISM_INTERNAL_MAP","DEFAULT","PLAIN","GSSAPI","monitoringEvents","VALID_AUTH_MECHANISMS","Set","validOptionNames","ignoreOptionNames","legacyOptionNames","validOptions","options","_validOptions","concat","name","indexOf","validateOptions","console","warn","LEGACY_OPTIONS_MAP","reduce","obj","toLowerCase","addListeners","mongoClient","topology","on","createListener","once","assignTopology","s","sessionPool","coreTopology","clearAllEvents","forEach","event","removeAllListeners","collectEvents","MongoClient","collectedEvents","object1","object2","push","resolveTLSOptions","tls","optionName","readFileSync","emitDeprecationForNonUnifiedTopology","connect","url","callback","Object","assign","Error","didRequestAuthentication","logger","connectWithUrl","connectCallback","useNewUrlParser","parseFn","transform","transformUrlOptions","legacyTransformUrlOptions","err","_object","object","_finalOptions","createUnifiedOptions","socketTimeoutMS","connectTimeoutMS","retryWrites","useRecoveryToken","readPreference","db_options","auth","journal","j","undefined","servers","length","credentials","generateCredentials","user","password","useUnifiedTopology","createTopology","replicaSet","rs_name","createServer","warningMessage","message","isWarn","emit","relayEvents","finalOptions","read_preference","isDoingAuth","authMechanism","eventSet","v1","v2","has","promiseLibrary","translateOptions","server","close","ismaster","lastIsMaster","msg","replayEvents","DEPRECATED_UNIFIED_EVENTS","registerDeprecatedEventNotifiers","eventName","topologyType","translationOptions","createServers","autoEncryption","AutoEncrypter","resolve","mongodbClientEncryption","extension","mongoCryptOptions","bson","Binary","Code","DBRef","Decimal128","Double","Int32","Long","Map","MaxKey","MinKey","ObjectId","BSONRegExp","Symbol","Timestamp","autoEncrypter","init","childOptions","noMerge","mergeOptions","Buffer","isBuffer","Array","isArray","username","source","authSource","authdb","dbName","authMechanismRaw","toUpperCase","mechanismProperties","authMechanismProperties","create","driver","mechanism","target","flatten","serverOrCommandEvents","events","i","hosts","camelCaseName","hasUsername","hasAuthMechanism","db","defaultDatabase","maxPoolSize","poolSize","readConcernLevel","readConcern","wTimeoutMS","wtimeout","srvHost","readPreferenceTags","read_preference_tags","tags","maxStalenessSeconds","map","serverObj","domain_socket","host","port","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,SAAlC;;AACA,MAAME,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAAlC;;AACA,MAAMC,gBAAgB,GAAGF,OAAO,CAAC,SAAD,CAAP,CAAmBE,gBAA5C;;AACA,MAAMC,UAAU,GAAGH,OAAO,CAAC,SAAD,CAAP,CAAmBG,UAAtC;;AACA,MAAMC,MAAM,GAAGJ,OAAO,CAAC,sBAAD,CAAtB;;AACA,MAAMK,cAAc,GAAGL,OAAO,CAAC,+BAAD,CAA9B;;AACA,MAAMM,KAAK,GAAGN,OAAO,CAAC,SAAD,CAAP,CAAmBO,qBAAjC;;AACA,MAAMC,WAAW,GAAGR,OAAO,CAAC,iBAAD,CAA3B;;AACA,MAAMS,cAAc,GAAGT,OAAO,CAAC,SAAD,CAAP,CAAmBS,cAA1C;;AACA,MAAMC,OAAO,GAAGV,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAMW,MAAM,GAAGX,OAAO,CAAC,sBAAD,CAAtB;;AACA,MAAMY,iBAAiB,GAAGZ,OAAO,CAAC,SAAD,CAAP,CAAmBa,QAAnB,CAA4BD,iBAAtD;;AACA,MAAME,sBAAsB,GAAGd,OAAO,CAAC,UAAD,CAAP,CAAoBc,sBAAnD;;AACA,MAAMC,EAAE,GAAGf,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMgB,IAAI,GAAGhB,OAAO,CAAC,0BAAD,CAAP,CAAoCiB,YAApC,EAAb;;AACA,MAAMC,gBAAgB,GAAGlB,OAAO,CAAC,gBAAD,CAAP,CAA0BkB,gBAAnD;;AAEA,IAAIC,MAAJ;;AACA,SAASC,UAAT,GAAsB;AACpB,MAAI,CAACD,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAGnB,OAAO,CAAC,iBAAD,CAAhB;AACD;;AACD,SAAOmB,MAAP;AACD;;AAED,MAAME,WAAW,GAAGtB,SAAS,CAC3BC,OAAO,CAAC,eAAD,CADoB,EAE3B,uFACE,sFAHyB,CAA7B;AAMA,MAAMsB,2BAA2B,GAAG;AAClCC,EAAAA,OAAO,EAAE,SADyB;AAElCC,EAAAA,KAAK,EAAE,OAF2B;AAGlCC,EAAAA,MAAM,EAAE,QAH0B;AAIlC,gBAAc,SAJoB;AAKlC,kBAAgB,MALkB;AAMlC,iBAAe,aANmB;AAOlC,iBAAe,aAPmB;AAQlC,mBAAiB;AARiB,CAApC;AAWA,MAAMC,gBAAgB,GAAG,CACvB,SADuB,EAEvB,OAFuB,EAGvB,eAHuB,EAIvB,0BAJuB,EAKvB,wBALuB,EAMvB,0BANuB,EAOvB,uBAPuB,EAQvB,cARuB,EASvB,iBATuB,EAUvB,gBAVuB,EAWvB,4BAXuB,EAYvB,gBAZuB,EAavB,kBAbuB,EAcvB,eAduB,EAevB,QAfuB,EAgBvB,MAhBuB,EAiBvB,MAjBuB,EAkBvB,IAlBuB,EAmBvB,KAnBuB,EAoBvB,WApBuB,EAqBvB,MArBuB,CAAzB;AAwBA,MAAMC,qBAAqB,GAAG,IAAIC,GAAJ,CAAQ,CACpC,SADoC,EAEpC,OAFoC,EAGpC,QAHoC,EAIpC,YAJoC,EAKpC,cALoC,EAMpC,aANoC,EAOpC,aAPoC,EAQpC,eARoC,CAAR,CAA9B;AAWA,MAAMC,gBAAgB,GAAG,CACvB,UADuB,EAEvB,KAFuB,EAGvB,aAHuB,EAIvB,OAJuB,EAKvB,SALuB,EAMvB,QANuB,EAOvB,SAPuB,EAQvB,QARuB,EASvB,eATuB,EAUvB,SAVuB,EAWvB,WAXuB,EAYvB,uBAZuB,EAavB,kBAbuB,EAcvB,QAduB,EAevB,iBAfuB,EAgBvB,gBAhBuB,EAiBvB,mBAjBuB,EAkBvB,IAlBuB,EAmBvB,YAnBuB,EAoBvB,YApBuB,EAqBvB,8BArBuB,EAsBvB,qBAtBuB,EAuBvB,sBAvBuB,EAwBvB,YAxBuB,EAyBvB,GAzBuB,EA0BvB,UA1BuB,EA2BvB,GA3BuB,EA4BvB,qBA5BuB,EA6BvB,oBA7BuB,EA8BvB,iBA9BuB,EA+BvB,KA/BuB,EAgCvB,kBAhCuB,EAiCvB,gBAjCuB,EAkCvB,WAlCuB,EAmCvB,gBAnCuB,EAoCvB,aApCuB,EAqCvB,qBArCuB,EAsCvB,aAtCuB,EAuCvB,QAvCuB,EAwCvB,eAxCuB,EAyCvB,gBAzCuB,EA0CvB,cA1CuB,EA2CvB,gBA3CuB,EA4CvB,qBA5CuB,EA6CvB,iBA7CuB,EA8CvB,SA9CuB,EA+CvB,MA/CuB,EAgDvB,MAhDuB,EAiDvB,UAjDuB,EAkDvB,eAlDuB,EAmDvB,aAnDuB,EAoDvB,OApDuB,EAqDvB,oBArDuB,EAsDvB,iBAtDuB,EAuDvB,gBAvDuB,EAwDvB,SAxDuB,EAyDvB,iBAzDuB,EA0DvB,aA1DuB,EA2DvB,YA3DuB,EA4DvB,iBA5DuB,EA6DvB,oBA7DuB,EA8DvB,0BA9DuB,EA+DvB,kBA/DuB,EAgEvB,gBAhEuB,EAiEvB,YAjEuB,EAkEvB,KAlEuB,EAmEvB,aAnEuB,EAoEvB,aApEuB,EAqEvB,6BArEuB,EAsEvB,0BAtEuB,EAuEvB,WAvEuB,EAwEvB,oBAxEuB,EAyEvB,uBAzEuB,EA0EvB,+BA1EuB,EA2EvB,yBA3EuB,EA4EvB,sBA5EuB,EA6EvB,kBA7EuB,EA8EvB,SA9EuB,EAgFvB;AACA,aAjFuB,EAkFvB,aAlFuB,EAmFvB,eAnFuB,EAoFvB,oBApFuB,CAAzB;AAuFA,MAAMC,iBAAiB,GAAG,CAAC,eAAD,CAA1B;AACA,MAAMC,iBAAiB,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,SAAtB,EAAiC,QAAjC,EAA2C,IAA3C,CAA1B,C,CAEA;;AACA,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,QAAMC,aAAa,GAAGL,gBAAgB,CAACM,MAAjB,CAAwBJ,iBAAxB,CAAtB;;AAEA,OAAK,MAAMK,IAAX,IAAmBH,OAAnB,EAA4B;AAC1B,QAAIH,iBAAiB,CAACO,OAAlB,CAA0BD,IAA1B,MAAoC,CAAC,CAAzC,EAA4C;AAC1C;AACD;;AAED,QAAIF,aAAa,CAACG,OAAd,CAAsBD,IAAtB,MAAgC,CAAC,CAArC,EAAwC;AACtC,UAAIH,OAAO,CAACK,eAAZ,EAA6B;AAC3B,eAAO,IAAInC,UAAJ,CAAgB,UAASiC,IAAK,mBAA9B,CAAP;AACD,OAFD,MAEO;AACLG,QAAAA,OAAO,CAACC,IAAR,CAAc,gBAAeJ,IAAK,oBAAlC;AACD;AACF;;AAED,QAAIL,iBAAiB,CAACM,OAAlB,CAA0BD,IAA1B,MAAoC,CAAC,CAAzC,EAA4C;AAC1CG,MAAAA,OAAO,CAACC,IAAR,CACG,uDAAD,GACG,2EAA0EX,gBAAiB,GAFhG;AAID;AACF;AACF;;AAED,MAAMY,kBAAkB,GAAGZ,gBAAgB,CAACa,MAAjB,CAAwB,CAACC,GAAD,EAAMP,IAAN,KAAe;AAChEO,EAAAA,GAAG,CAACP,IAAI,CAACQ,WAAL,EAAD,CAAH,GAA0BR,IAA1B;AACA,SAAOO,GAAP;AACD,CAH0B,EAGxB,EAHwB,CAA3B;;AAKA,SAASE,YAAT,CAAsBC,WAAtB,EAAmCC,QAAnC,EAA6C;AAC3CA,EAAAA,QAAQ,CAACC,EAAT,CAAY,eAAZ,EAA6BC,cAAc,CAACH,WAAD,EAAc,eAAd,CAA3C;AACAC,EAAAA,QAAQ,CAACC,EAAT,CAAY,OAAZ,EAAqBC,cAAc,CAACH,WAAD,EAAc,OAAd,CAAnC;AACAC,EAAAA,QAAQ,CAACC,EAAT,CAAY,SAAZ,EAAuBC,cAAc,CAACH,WAAD,EAAc,SAAd,CAArC;AACAC,EAAAA,QAAQ,CAACC,EAAT,CAAY,OAAZ,EAAqBC,cAAc,CAACH,WAAD,EAAc,OAAd,CAAnC;AACAC,EAAAA,QAAQ,CAACC,EAAT,CAAY,YAAZ,EAA0BC,cAAc,CAACH,WAAD,EAAc,YAAd,CAAxC;AACAC,EAAAA,QAAQ,CAACG,IAAT,CAAc,MAAd,EAAsBD,cAAc,CAACH,WAAD,EAAc,MAAd,CAApC;AACAC,EAAAA,QAAQ,CAACG,IAAT,CAAc,WAAd,EAA2BD,cAAc,CAACH,WAAD,EAAc,WAAd,CAAzC;AACAC,EAAAA,QAAQ,CAACG,IAAT,CAAc,KAAd,EAAqBD,cAAc,CAACH,WAAD,EAAc,KAAd,CAAnC;AACAC,EAAAA,QAAQ,CAACC,EAAT,CAAY,WAAZ,EAAyBC,cAAc,CAACH,WAAD,EAAc,WAAd,CAAvC;AACD;;AAED,SAASK,cAAT,CAAwBhC,MAAxB,EAAgC4B,QAAhC,EAA0C;AACxC5B,EAAAA,MAAM,CAAC4B,QAAP,GAAkBA,QAAlB;;AAEA,MAAI,EAAEA,QAAQ,YAAY1C,cAAtB,CAAJ,EAA2C;AACzC0C,IAAAA,QAAQ,CAACK,CAAT,CAAWC,WAAX,GAAyB,IAAIzC,iBAAJ,CAAsBmC,QAAQ,CAACK,CAAT,CAAWE,YAAjC,CAAzB;AACD;AACF,C,CAED;;;AACA,SAASC,cAAT,CAAwBR,QAAxB,EAAkC;AAChCrB,EAAAA,gBAAgB,CAAC8B,OAAjB,CAAyBC,KAAK,IAAIV,QAAQ,CAACW,kBAAT,CAA4BD,KAA5B,CAAlC;AACD,C,CAED;;;AACA,SAASE,aAAT,CAAuBb,WAAvB,EAAoCC,QAApC,EAA8C;AAC5C,MAAIa,WAAW,GAAGxC,UAAU,EAA5B;AACA,QAAMyC,eAAe,GAAG,EAAxB;;AAEA,MAAIf,WAAW,YAAYc,WAA3B,EAAwC;AACtClC,IAAAA,gBAAgB,CAAC8B,OAAjB,CAAyBC,KAAK,IAAI;AAChCV,MAAAA,QAAQ,CAACC,EAAT,CAAYS,KAAZ,EAAmB,CAACK,OAAD,EAAUC,OAAV,KAAsB;AACvC,YAAIN,KAAK,KAAK,MAAd,EAAsB;AACpBI,UAAAA,eAAe,CAACG,IAAhB,CAAqB;AAAEP,YAAAA,KAAK,EAAEA,KAAT;AAAgBK,YAAAA,OAAO,EAAEhB;AAAzB,WAArB;AACD,SAFD,MAEO;AACLe,UAAAA,eAAe,CAACG,IAAhB,CAAqB;AAAEP,YAAAA,KAAK,EAAEA,KAAT;AAAgBK,YAAAA,OAAO,EAAEA,OAAzB;AAAkCC,YAAAA,OAAO,EAAEA;AAA3C,WAArB;AACD;AACF,OAND;AAOD,KARD;AASD;;AAED,SAAOF,eAAP;AACD;;AAED,SAASI,iBAAT,CAA2BhC,OAA3B,EAAoC;AAClC,MAAIA,OAAO,CAACiC,GAAR,IAAe,IAAnB,EAAyB;AACvB;AACD;;AAED,GAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+BV,OAA/B,CAAuCW,UAAU,IAAI;AACnD,QAAIlC,OAAO,CAACkC,UAAD,CAAX,EAAyB;AACvBlC,MAAAA,OAAO,CAACkC,UAAD,CAAP,GAAsBpD,EAAE,CAACqD,YAAH,CAAgBnC,OAAO,CAACkC,UAAD,CAAvB,CAAtB;AACD;AACF,GAJD;AAKD;;AAED,MAAME,oCAAoC,GAAGtE,SAAS,CAAC,MAAM,CAAE,CAAT,EACtD,4GAA4G,gIADtD,CAAtD;;AAGA,SAASuE,OAAT,CAAiBxB,WAAjB,EAA8ByB,GAA9B,EAAmCtC,OAAnC,EAA4CuC,QAA5C,EAAsD;AACpDvC,EAAAA,OAAO,GAAGwC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBzC,OAAlB,CAAV,CADoD,CAGpD;;AACA,MAAIuC,QAAQ,IAAI,IAAhB,EAAsB;AACpB,UAAM,IAAIG,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,MAAIC,wBAAwB,GAAG,KAA/B;AACA,QAAMC,MAAM,GAAG5E,MAAM,CAAC,aAAD,EAAgBgC,OAAhB,CAArB,CAToD,CAWpD;;AACA,MAAIsC,GAAG,YAAY5D,MAAf,IAAyB4D,GAAG,YAAY7D,OAAxC,IAAmD6D,GAAG,YAAYnE,MAAtE,EAA8E;AAC5E,WAAO0E,cAAc,CAAChC,WAAD,EAAcyB,GAAd,EAAmBtC,OAAnB,EAA4B8C,eAA5B,CAArB;AACD;;AAED,QAAMC,eAAe,GAAG/C,OAAO,CAAC+C,eAAR,KAA4B,KAApD;AAEA,QAAMC,OAAO,GAAGD,eAAe,GAAG1E,KAAH,GAAWe,WAA1C;AACA,QAAM6D,SAAS,GAAGF,eAAe,GAAGG,mBAAH,GAAyBC,yBAA1D;AAEAH,EAAAA,OAAO,CAACV,GAAD,EAAMtC,OAAN,EAAe,CAACoD,GAAD,EAAMC,OAAN,KAAkB;AACtC;AACA,QAAID,GAAJ,EAAS,OAAOb,QAAQ,CAACa,GAAD,CAAf,CAF6B,CAItC;;AACA,UAAME,MAAM,GAAGL,SAAS,CAACI,OAAD,CAAxB,CALsC,CAOtC;;AACA,UAAME,aAAa,GAAGC,oBAAoB,CAACF,MAAD,EAAStD,OAAT,CAA1C,CARsC,CAUtC;;;AACA,QAAIuD,aAAa,CAACE,eAAd,IAAiC,IAArC,EAA2CF,aAAa,CAACE,eAAd,GAAgC,CAAhC;AAC3C,QAAIF,aAAa,CAACG,gBAAd,IAAkC,IAAtC,EAA4CH,aAAa,CAACG,gBAAd,GAAiC,KAAjC;AAC5C,QAAIH,aAAa,CAACI,WAAd,IAA6B,IAAjC,EAAuCJ,aAAa,CAACI,WAAd,GAA4B,IAA5B;AACvC,QAAIJ,aAAa,CAACK,gBAAd,IAAkC,IAAtC,EAA4CL,aAAa,CAACK,gBAAd,GAAiC,IAAjC;AAC5C,QAAIL,aAAa,CAACM,cAAd,IAAgC,IAApC,EAA0CN,aAAa,CAACM,cAAd,GAA+B,SAA/B;;AAE1C,QAAIN,aAAa,CAACO,UAAd,IAA4BP,aAAa,CAACO,UAAd,CAAyBC,IAAzD,EAA+D;AAC7D,aAAOR,aAAa,CAACO,UAAd,CAAyBC,IAAhC;AACD,KAnBqC,CAqBtC;;;AACA,QAAIR,aAAa,CAACS,OAAd,IAAyB,IAA7B,EAAmC;AACjCT,MAAAA,aAAa,CAACU,CAAd,GAAkBV,aAAa,CAACS,OAAhC;AACAT,MAAAA,aAAa,CAACS,OAAd,GAAwBE,SAAxB;AACD,KAzBqC,CA2BtC;;;AACAlC,IAAAA,iBAAiB,CAACuB,aAAD,CAAjB,CA5BsC,CA8BtC;;AACA1C,IAAAA,WAAW,CAACM,CAAZ,CAAcnB,OAAd,GAAwBuD,aAAxB,CA/BsC,CAiCtC;;AACA,QAAID,MAAM,CAACa,OAAP,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,aAAO7B,QAAQ,CAAC,IAAIG,KAAJ,CAAU,uDAAV,CAAD,CAAf;AACD;;AAED,QAAIa,aAAa,CAACQ,IAAd,IAAsB,CAACR,aAAa,CAACc,WAAzC,EAAsD;AACpD,UAAI;AACF1B,QAAAA,wBAAwB,GAAG,IAA3B;AACAY,QAAAA,aAAa,CAACc,WAAd,GAA4BC,mBAAmB,CAC7CzD,WAD6C,EAE7C0C,aAAa,CAACQ,IAAd,CAAmBQ,IAF0B,EAG7ChB,aAAa,CAACQ,IAAd,CAAmBS,QAH0B,EAI7CjB,aAJ6C,CAA/C;AAMD,OARD,CAQE,OAAOH,GAAP,EAAY;AACZ,eAAOb,QAAQ,CAACa,GAAD,CAAf;AACD;AACF;;AAED,QAAIG,aAAa,CAACkB,kBAAlB,EAAsC;AACpC,aAAOC,cAAc,CAAC7D,WAAD,EAAc,SAAd,EAAyB0C,aAAzB,EAAwCT,eAAxC,CAArB;AACD;;AAEDV,IAAAA,oCAAoC,GAxDE,CA0DtC;;AACA,QAAImB,aAAa,CAACoB,UAAd,IAA4BpB,aAAa,CAACqB,OAA9C,EAAuD;AACrD,aAAOF,cAAc,CAAC7D,WAAD,EAAc,YAAd,EAA4B0C,aAA5B,EAA2CT,eAA3C,CAArB;AACD,KAFD,MAEO,IAAIQ,MAAM,CAACa,OAAP,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AACpC,aAAOM,cAAc,CAAC7D,WAAD,EAAc,QAAd,EAAwB0C,aAAxB,EAAuCT,eAAvC,CAArB;AACD,KAFM,MAEA;AACL,aAAO+B,YAAY,CAAChE,WAAD,EAAc0C,aAAd,EAA6BT,eAA7B,CAAnB;AACD;AACF,GAlEM,CAAP;;AAoEA,WAASA,eAAT,CAAyBM,GAAzB,EAA8BtC,QAA9B,EAAwC;AACtC,UAAMgE,cAAc,GAAI,sLAAxB;;AACA,QAAI1B,GAAG,IAAIA,GAAG,CAAC2B,OAAJ,KAAgB,sCAA3B,EAAmE;AACjE,UAAInC,MAAM,CAACoC,MAAP,EAAJ,EAAqB;AACnBpC,QAAAA,MAAM,CAACrC,IAAP,CAAYuE,cAAZ;AACD,OAHgE,CAKjE;;;AACA,aAAOvC,QAAQ,CAAC,IAAIrE,UAAJ,CAAe4G,cAAf,CAAD,CAAf;AACD;;AAED,QAAInC,wBAAJ,EAA8B;AAC5B9B,MAAAA,WAAW,CAACoE,IAAZ,CAAiB,eAAjB,EAAkC,IAAlC,EAAwC,IAAxC;AACD,KAbqC,CAetC;;;AACA1C,IAAAA,QAAQ,CAACa,GAAD,EAAMtC,QAAN,CAAR;AACD;AACF;;AAED,SAAS+B,cAAT,CAAwBhC,WAAxB,EAAqCyB,GAArC,EAA0CtC,OAA1C,EAAmD8C,eAAnD,EAAoE;AAClE;AACA5B,EAAAA,cAAc,CAACL,WAAD,EAAcyB,GAAd,CAAd,CAFkE,CAIlE;;AACA1B,EAAAA,YAAY,CAACC,WAAD,EAAcyB,GAAd,CAAZ,CALkE,CAOlE;;AACA4C,EAAAA,WAAW,CAACrE,WAAD,EAAcyB,GAAd,CAAX;AAEA,MAAI6C,YAAY,GAAG3C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBzC,OAAlB,CAAnB,CAVkE,CAYlE;;AACA,MAAI,OAAOA,OAAO,CAAC6D,cAAf,KAAkC,QAAlC,IAA8C,OAAO7D,OAAO,CAACoF,eAAf,KAAmC,QAArF,EAA+F;AAC7FD,IAAAA,YAAY,CAACtB,cAAb,GAA8B,IAAIrF,cAAJ,CAC5BwB,OAAO,CAAC6D,cAAR,IAA0B7D,OAAO,CAACoF,eADN,CAA9B;AAGD;;AAED,QAAMC,WAAW,GAAGF,YAAY,CAACZ,IAAb,IAAqBY,YAAY,CAACX,QAAlC,IAA8CW,YAAY,CAACG,aAA/E;;AACA,MAAID,WAAW,IAAI,CAACF,YAAY,CAACd,WAAjC,EAA8C;AAC5C,QAAI;AACFc,MAAAA,YAAY,CAACd,WAAb,GAA2BC,mBAAmB,CAC5CzD,WAD4C,EAE5CsE,YAAY,CAACZ,IAF+B,EAG5CY,YAAY,CAACX,QAH+B,EAI5CW,YAJ4C,CAA9C;AAMD,KAPD,CAOE,OAAO/B,GAAP,EAAY;AACZ,aAAON,eAAe,CAACM,GAAD,EAAMd,GAAN,CAAtB;AACD;AACF;;AAED,SAAOA,GAAG,CAACD,OAAJ,CAAY8C,YAAZ,EAA0BrC,eAA1B,CAAP;AACD;;AAED,SAAS9B,cAAT,CAAwBH,WAAxB,EAAqCW,KAArC,EAA4C;AAC1C,QAAM+D,QAAQ,GAAG,IAAI5F,GAAJ,CAAQ,CAAC,KAAD,EAAQ,WAAR,EAAqB,MAArB,EAA6B,WAA7B,CAAR,CAAjB;AACA,SAAO,CAAC6F,EAAD,EAAKC,EAAL,KAAY;AACjB,QAAIF,QAAQ,CAACG,GAAT,CAAalE,KAAb,CAAJ,EAAyB;AACvB,aAAOX,WAAW,CAACoE,IAAZ,CAAiBzD,KAAjB,EAAwBX,WAAxB,CAAP;AACD;;AAEDA,IAAAA,WAAW,CAACoE,IAAZ,CAAiBzD,KAAjB,EAAwBgE,EAAxB,EAA4BC,EAA5B;AACD,GAND;AAOD;;AAED,SAASZ,YAAT,CAAsBhE,WAAtB,EAAmCb,OAAnC,EAA4CuC,QAA5C,EAAsD;AACpD;AACAvC,EAAAA,OAAO,CAAC2F,cAAR,GAAyB9E,WAAW,CAACM,CAAZ,CAAcwE,cAAvC,CAFoD,CAIpD;;AACA,QAAMxB,OAAO,GAAGyB,gBAAgB,CAAC5F,OAAD,CAAhC;AAEA,QAAM6F,MAAM,GAAG1B,OAAO,CAAC,CAAD,CAAtB,CAPoD,CASpD;;AACA,QAAMvC,eAAe,GAAGF,aAAa,CAACb,WAAD,EAAcgF,MAAd,CAArC,CAVoD,CAYpD;;AACAA,EAAAA,MAAM,CAACxD,OAAP,CAAerC,OAAf,EAAwB,CAACoD,GAAD,EAAMtC,QAAN,KAAmB;AACzC,QAAIsC,GAAJ,EAAS;AACPyC,MAAAA,MAAM,CAACC,KAAP,CAAa,IAAb;AACA,aAAOvD,QAAQ,CAACa,GAAD,CAAf;AACD,KAJwC,CAKzC;;;AACA9B,IAAAA,cAAc,CAACuE,MAAD,CAAd,CANyC,CAQzC;;AACAX,IAAAA,WAAW,CAACrE,WAAD,EAAcgF,MAAd,CAAX,CATyC,CAUzC;;AACAjF,IAAAA,YAAY,CAACC,WAAD,EAAcgF,MAAd,CAAZ,CAXyC,CAYzC;;AACA,UAAME,QAAQ,GAAGjF,QAAQ,CAACkF,YAAT,EAAjB,CAbyC,CAezC;;AACA9E,IAAAA,cAAc,CAACL,WAAD,EAAcC,QAAd,CAAd,CAhByC,CAkBzC;;AACA,QAAIiF,QAAQ,IAAIA,QAAQ,CAACE,GAAT,KAAiB,UAAjC,EAA6C;AAC3C;AACAnF,MAAAA,QAAQ,CAACgF,KAAT,GAF2C,CAG3C;;AACA,aAAOpB,cAAc,CAAC7D,WAAD,EAAc,QAAd,EAAwBb,OAAxB,EAAiCuC,QAAjC,CAArB;AACD,KAxBwC,CA0BzC;;;AACA2D,IAAAA,YAAY,CAACrF,WAAD,EAAce,eAAd,CAAZ,CA3ByC,CA4BzC;;AACAW,IAAAA,QAAQ,CAACa,GAAD,EAAMtC,QAAN,CAAR;AACD,GA9BD;AA+BD;;AAED,MAAMqF,yBAAyB,GAAG,IAAIxG,GAAJ,CAAQ,CACxC,WADwC,EAExC,iBAFwC,EAGxC,kBAHwC,EAIxC,QAJwC,EAKxC,MALwC,EAMxC,MANwC,EAOxC,IAPwC,EAQxC,KARwC,EASxC,WATwC,EAUxC,MAVwC,CAAR,CAAlC;;AAaA,SAASyG,gCAAT,CAA0ClH,MAA1C,EAAkD;AAChDA,EAAAA,MAAM,CAAC6B,EAAP,CAAU,aAAV,EAAyBsF,SAAS,IAAI;AACpC,QAAIF,yBAAyB,CAACT,GAA1B,CAA8BW,SAA9B,CAAJ,EAA8C;AAC5CxH,MAAAA,sBAAsB,CACnB,SAAQwH,SAAU,6GADC,EAEpB,oBAFoB,CAAtB;AAID;AACF,GAPD;AAQD;;AAED,SAAS3B,cAAT,CAAwB7D,WAAxB,EAAqCyF,YAArC,EAAmDtG,OAAnD,EAA4DuC,QAA5D,EAAsE;AACpE;AACAvC,EAAAA,OAAO,CAAC2F,cAAR,GAAyB9E,WAAW,CAACM,CAAZ,CAAcwE,cAAvC;AAEA,QAAMY,kBAAkB,GAAG,EAA3B;AACA,MAAID,YAAY,KAAK,SAArB,EAAgCC,kBAAkB,CAACC,aAAnB,GAAmC,KAAnC,CALoC,CAOpE;;AACA,QAAMrC,OAAO,GAAGyB,gBAAgB,CAAC5F,OAAD,EAAUuG,kBAAV,CAAhC,CARoE,CAUpE;;AACA,MAAIvG,OAAO,CAACyG,cAAR,IAA0B,IAA9B,EAAoC;AAClC,QAAIC,aAAJ;;AACA,QAAI;AACF3I,MAAAA,OAAO,CAAC4I,OAAR,CAAgB,2BAAhB;AACD,KAFD,CAEE,OAAOvD,GAAP,EAAY;AACZb,MAAAA,QAAQ,CACN,IAAIrE,UAAJ,CACE,oIADF,CADM,CAAR;AAKA;AACD;;AAED,QAAI;AACF,UAAI0I,uBAAuB,GAAG7I,OAAO,CAAC,2BAAD,CAArC;;AACA,UAAI,OAAO6I,uBAAuB,CAACC,SAA/B,KAA6C,UAAjD,EAA6D;AAC3DtE,QAAAA,QAAQ,CACN,IAAIrE,UAAJ,CACE,uKADF,CADM,CAAR;AAKD;;AACDwI,MAAAA,aAAa,GAAGE,uBAAuB,CAACC,SAAxB,CAAkC9I,OAAO,CAAC,aAAD,CAAzC,EAA0D2I,aAA1E;AACD,KAVD,CAUE,OAAOtD,GAAP,EAAY;AACZb,MAAAA,QAAQ,CAACa,GAAD,CAAR;AACA;AACD;;AAED,UAAM0D,iBAAiB,GAAGtE,MAAM,CAACC,MAAP,CACxB;AACEsE,MAAAA,IAAI,EACF/G,OAAO,CAAC+G,IAAR,IACA,IAAIhI,IAAJ,CAAS,CACPA,IAAI,CAACiI,MADE,EAEPjI,IAAI,CAACkI,IAFE,EAGPlI,IAAI,CAACmI,KAHE,EAIPnI,IAAI,CAACoI,UAJE,EAKPpI,IAAI,CAACqI,MALE,EAMPrI,IAAI,CAACsI,KANE,EAOPtI,IAAI,CAACuI,IAPE,EAQPvI,IAAI,CAACwI,GARE,EASPxI,IAAI,CAACyI,MATE,EAUPzI,IAAI,CAAC0I,MAVE,EAWP1I,IAAI,CAAC2I,QAXE,EAYP3I,IAAI,CAAC4I,UAZE,EAaP5I,IAAI,CAAC6I,MAbE,EAcP7I,IAAI,CAAC8I,SAdE,CAAT;AAHJ,KADwB,EAqBxB7H,OAAO,CAACyG,cArBgB,CAA1B;AAwBAzG,IAAAA,OAAO,CAAC8H,aAAR,GAAwB,IAAIpB,aAAJ,CAAkB7F,WAAlB,EAA+BiG,iBAA/B,CAAxB;AACD,GAhEmE,CAkEpE;;;AACA,MAAIhG,QAAJ;;AACA,MAAIwF,YAAY,KAAK,QAArB,EAA+B;AAC7BxF,IAAAA,QAAQ,GAAG,IAAI3C,MAAJ,CAAWgG,OAAX,EAAoBnE,OAApB,CAAX;AACD,GAFD,MAEO,IAAIsG,YAAY,KAAK,YAArB,EAAmC;AACxCxF,IAAAA,QAAQ,GAAG,IAAIrC,OAAJ,CAAY0F,OAAZ,EAAqBnE,OAArB,CAAX;AACD,GAFM,MAEA,IAAIsG,YAAY,KAAK,SAArB,EAAgC;AACrCxF,IAAAA,QAAQ,GAAG,IAAI1C,cAAJ,CAAmB4B,OAAO,CAACmE,OAA3B,EAAoCnE,OAApC,CAAX;AACAoG,IAAAA,gCAAgC,CAACvF,WAAD,CAAhC;AACD,GA3EmE,CA6EpE;;;AACAD,EAAAA,YAAY,CAACC,WAAD,EAAcC,QAAd,CAAZ,CA9EoE,CAgFpE;;AACAoE,EAAAA,WAAW,CAACrE,WAAD,EAAcC,QAAd,CAAX,CAjFoE,CAmFpE;;AACAI,EAAAA,cAAc,CAACL,WAAD,EAAcC,QAAd,CAAd,CApFoE,CAsFpE;;AACA,MAAId,OAAO,CAAC8H,aAAZ,EAA2B;AACzB9H,IAAAA,OAAO,CAAC8H,aAAR,CAAsBC,IAAtB,CAA2B3E,GAAG,IAAI;AAChC,UAAIA,GAAJ,EAAS;AACPb,QAAAA,QAAQ,CAACa,GAAD,CAAR;AACA;AACD;;AAEDtC,MAAAA,QAAQ,CAACuB,OAAT,CAAiBrC,OAAjB,EAA0BoD,GAAG,IAAI;AAC/B,YAAIA,GAAJ,EAAS;AACPtC,UAAAA,QAAQ,CAACgF,KAAT,CAAe,IAAf;AACAvD,UAAAA,QAAQ,CAACa,GAAD,CAAR;AACA;AACD;;AAEDb,QAAAA,QAAQ,CAAC2B,SAAD,EAAYpD,QAAZ,CAAR;AACD,OARD;AASD,KAfD;AAiBA;AACD,GA1GmE,CA4GpE;;;AACAA,EAAAA,QAAQ,CAACuB,OAAT,CAAiBrC,OAAjB,EAA0BoD,GAAG,IAAI;AAC/B,QAAIA,GAAJ,EAAS;AACPtC,MAAAA,QAAQ,CAACgF,KAAT,CAAe,IAAf;AACA,aAAOvD,QAAQ,CAACa,GAAD,CAAf;AACD;;AAEDb,IAAAA,QAAQ,CAAC2B,SAAD,EAAYpD,QAAZ,CAAR;AACA;AACD,GARD;AASD;;AAED,SAAS0C,oBAAT,CAA8B2B,YAA9B,EAA4CnF,OAA5C,EAAqD;AACnD,QAAMgI,YAAY,GAAG,CACnB,QADmB,EAEnB,QAFmB,EAGnB,IAHmB,EAInB,SAJmB,EAKnB,YALmB,EAMnB,gBANmB,EAOnB,YAPmB,EAQnB,gBARmB,CAArB;AAUA,QAAMC,OAAO,GAAG,CAAC,aAAD,EAAgB,aAAhB,EAA+B,gBAA/B,CAAhB;;AAEA,OAAK,MAAM9H,IAAX,IAAmBH,OAAnB,EAA4B;AAC1B,QAAIiI,OAAO,CAAC7H,OAAR,CAAgBD,IAAI,CAACQ,WAAL,EAAhB,MAAwC,CAAC,CAA7C,EAAgD;AAC9CwE,MAAAA,YAAY,CAAChF,IAAD,CAAZ,GAAqBH,OAAO,CAACG,IAAD,CAA5B;AACD,KAFD,MAEO,IAAI6H,YAAY,CAAC5H,OAAb,CAAqBD,IAAI,CAACQ,WAAL,EAArB,MAA6C,CAAC,CAAlD,EAAqD;AAC1DwE,MAAAA,YAAY,GAAG+C,YAAY,CAAC/C,YAAD,EAAenF,OAAO,CAACG,IAAD,CAAtB,EAA8B,KAA9B,CAA3B;AACD,KAFM,MAEA;AACL,UACEH,OAAO,CAACG,IAAD,CAAP,IACA,OAAOH,OAAO,CAACG,IAAD,CAAd,KAAyB,QADzB,IAEA,CAACgI,MAAM,CAACC,QAAP,CAAgBpI,OAAO,CAACG,IAAD,CAAvB,CAFD,IAGA,CAACkI,KAAK,CAACC,OAAN,CAActI,OAAO,CAACG,IAAD,CAArB,CAJH,EAKE;AACAgF,QAAAA,YAAY,GAAG+C,YAAY,CAAC/C,YAAD,EAAenF,OAAO,CAACG,IAAD,CAAtB,EAA8B,IAA9B,CAA3B;AACD,OAPD,MAOO;AACLgF,QAAAA,YAAY,CAAChF,IAAD,CAAZ,GAAqBH,OAAO,CAACG,IAAD,CAA5B;AACD;AACF;AACF;;AAED,SAAOgF,YAAP;AACD;;AAED,SAASb,mBAAT,CAA6BpF,MAA7B,EAAqCqJ,QAArC,EAA+C/D,QAA/C,EAAyDxE,OAAzD,EAAkE;AAChEA,EAAAA,OAAO,GAAGwC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBzC,OAAlB,CAAV,CADgE,CAGhE;AACA;;AACA,QAAMwI,MAAM,GAAGxI,OAAO,CAACyI,UAAR,IAAsBzI,OAAO,CAAC0I,MAA9B,IAAwC1I,OAAO,CAAC2I,MAA/D,CALgE,CAOhE;;AACA,QAAMC,gBAAgB,GAAG5I,OAAO,CAACsF,aAAR,IAAyB,SAAlD;AACA,QAAMA,aAAa,GAAGsD,gBAAgB,CAACC,WAAjB,EAAtB;AACA,QAAMC,mBAAmB,GAAG9I,OAAO,CAAC+I,uBAApC;;AAEA,MAAI,CAACrJ,qBAAqB,CAACgG,GAAtB,CAA0BJ,aAA1B,CAAL,EAA+C;AAC7C,UAAMpH,UAAU,CAAC8K,MAAX,CAAkB;AACtBjE,MAAAA,OAAO,EAAG,4BAA2B6D,gBAAiB,wCADhC;AAEtBK,MAAAA,MAAM,EAAE;AAFc,KAAlB,CAAN;AAID;;AAED,SAAO,IAAIhL,gBAAJ,CAAqB;AAC1BiL,IAAAA,SAAS,EAAE7J,2BAA2B,CAACiG,aAAD,CADZ;AAE1BwD,IAAAA,mBAF0B;AAG1BN,IAAAA,MAH0B;AAI1BD,IAAAA,QAJ0B;AAK1B/D,IAAAA;AAL0B,GAArB,CAAP;AAOD;;AAED,SAASrB,yBAAT,CAAmCG,MAAnC,EAA2C;AACzC,SAAO4E,YAAY,CAAC1E,oBAAoB,CAAC,EAAD,EAAKF,MAAL,CAArB,EAAmCA,MAAnC,EAA2C,KAA3C,CAAnB;AACD;;AAED,SAAS4E,YAAT,CAAsBiB,MAAtB,EAA8BX,MAA9B,EAAsCY,OAAtC,EAA+C;AAC7C,OAAK,MAAMjJ,IAAX,IAAmBqI,MAAnB,EAA2B;AACzB,QAAIA,MAAM,CAACrI,IAAD,CAAN,IAAgB,OAAOqI,MAAM,CAACrI,IAAD,CAAb,KAAwB,QAAxC,IAAoDiJ,OAAxD,EAAiE;AAC/DD,MAAAA,MAAM,GAAGjB,YAAY,CAACiB,MAAD,EAASX,MAAM,CAACrI,IAAD,CAAf,EAAuBiJ,OAAvB,CAArB;AACD,KAFD,MAEO;AACLD,MAAAA,MAAM,CAAChJ,IAAD,CAAN,GAAeqI,MAAM,CAACrI,IAAD,CAArB;AACD;AACF;;AAED,SAAOgJ,MAAP;AACD;;AAED,SAASjE,WAAT,CAAqBrE,WAArB,EAAkCC,QAAlC,EAA4C;AAC1C,QAAMuI,qBAAqB,GAAG,CAC5B;AACA,kBAF4B,EAG5B,kBAH4B,EAI5B,eAJ4B,EAM5B;AACA,iBAP4B,EAQ5B,cAR4B,EAS5B,0BAT4B,EAU5B,wBAV4B,EAW5B,0BAX4B,EAY5B,uBAZ4B,EAa5B,iBAb4B,EAc5B,gBAd4B,EAe5B,4BAf4B,EAiB5B;AACA,UAlB4B,EAmB5B,MAnB4B,EAoB5B,MApB4B,EAqB5B,IArB4B,EAsB5BnJ,MAtB4B,CAsBrBjB,gBAtBqB,CAA9B;AAwBAoK,EAAAA,qBAAqB,CAAC9H,OAAtB,CAA8BC,KAAK,IAAI;AACrCV,IAAAA,QAAQ,CAACC,EAAT,CAAYS,KAAZ,EAAmB,CAACK,OAAD,EAAUC,OAAV,KAAsB;AACvCjB,MAAAA,WAAW,CAACoE,IAAZ,CAAiBzD,KAAjB,EAAwBK,OAAxB,EAAiCC,OAAjC;AACD,KAFD;AAGD,GAJD;AAKD,C,CAED;AACA;AACA;;;AACA,SAASoE,YAAT,CAAsBrF,WAAtB,EAAmCyI,MAAnC,EAA2C;AACzC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,CAAClF,MAA3B,EAAmCmF,CAAC,EAApC,EAAwC;AACtC1I,IAAAA,WAAW,CAACoE,IAAZ,CAAiBqE,MAAM,CAACC,CAAD,CAAN,CAAU/H,KAA3B,EAAkC8H,MAAM,CAACC,CAAD,CAAN,CAAU1H,OAA5C,EAAqDyH,MAAM,CAACC,CAAD,CAAN,CAAUzH,OAA/D;AACD;AACF;;AAED,SAASoB,mBAAT,CAA6BG,OAA7B,EAAsC;AACpC,MAAIC,MAAM,GAAGd,MAAM,CAACC,MAAP,CAAc;AAAE0B,IAAAA,OAAO,EAAEd,OAAO,CAACmG;AAAnB,GAAd,EAA0CnG,OAAO,CAACrD,OAAlD,CAAb;;AACA,OAAK,IAAIG,IAAT,IAAiBmD,MAAjB,EAAyB;AACvB,UAAMmG,aAAa,GAAGjJ,kBAAkB,CAACL,IAAD,CAAxC;;AACA,QAAIsJ,aAAJ,EAAmB;AACjBnG,MAAAA,MAAM,CAACmG,aAAD,CAAN,GAAwBnG,MAAM,CAACnD,IAAD,CAA9B;AACD;AACF;;AAED,QAAMuJ,WAAW,GAAGrG,OAAO,CAACU,IAAR,IAAgBV,OAAO,CAACU,IAAR,CAAawE,QAAjD;AACA,QAAMoB,gBAAgB,GAAGtG,OAAO,CAACrD,OAAR,IAAmBqD,OAAO,CAACrD,OAAR,CAAgBsF,aAA5D;;AACA,MAAIoE,WAAW,IAAIC,gBAAnB,EAAqC;AACnCrG,IAAAA,MAAM,CAACS,IAAP,GAAcvB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBY,OAAO,CAACU,IAA1B,CAAd;;AACA,QAAIT,MAAM,CAACS,IAAP,CAAY6F,EAAhB,EAAoB;AAClBtG,MAAAA,MAAM,CAACmF,UAAP,GAAoBnF,MAAM,CAACmF,UAAP,IAAqBnF,MAAM,CAACS,IAAP,CAAY6F,EAArD;AACD;;AAED,QAAItG,MAAM,CAACS,IAAP,CAAYwE,QAAhB,EAA0B;AACxBjF,MAAAA,MAAM,CAACS,IAAP,CAAYQ,IAAZ,GAAmBjB,MAAM,CAACS,IAAP,CAAYwE,QAA/B;AACD;AACF;;AAED,MAAIlF,OAAO,CAACwG,eAAZ,EAA6B;AAC3BvG,IAAAA,MAAM,CAACqF,MAAP,GAAgBtF,OAAO,CAACwG,eAAxB;AACD;;AAED,MAAIvG,MAAM,CAACwG,WAAX,EAAwB;AACtBxG,IAAAA,MAAM,CAACyG,QAAP,GAAkBzG,MAAM,CAACwG,WAAzB;AACD;;AAED,MAAIxG,MAAM,CAAC0G,gBAAX,EAA6B;AAC3B1G,IAAAA,MAAM,CAAC2G,WAAP,GAAqB,IAAI1L,WAAJ,CAAgB+E,MAAM,CAAC0G,gBAAvB,CAArB;AACD;;AAED,MAAI1G,MAAM,CAAC4G,UAAX,EAAuB;AACrB5G,IAAAA,MAAM,CAAC6G,QAAP,GAAkB7G,MAAM,CAAC4G,UAAzB;AACD;;AAED,MAAI7G,OAAO,CAAC+G,OAAZ,EAAqB;AACnB9G,IAAAA,MAAM,CAAC8G,OAAP,GAAiB/G,OAAO,CAAC+G,OAAzB;AACD;;AAED,SAAO9G,MAAP;AACD;;AAED,SAASsC,gBAAT,CAA0B5F,OAA1B,EAAmCuG,kBAAnC,EAAuD;AACrDA,EAAAA,kBAAkB,GAAG/D,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAE+D,IAAAA,aAAa,EAAE;AAAjB,GAAlB,EAA2CD,kBAA3C,CAArB,CADqD,CAGrD;;AACA,MAAI,OAAOvG,OAAO,CAAC6D,cAAf,KAAkC,QAAlC,IAA8C,OAAO7D,OAAO,CAACoF,eAAf,KAAmC,QAArF,EAA+F;AAC7FpF,IAAAA,OAAO,CAAC6D,cAAR,GAAyB,IAAIrF,cAAJ,CAAmBwB,OAAO,CAAC6D,cAAR,IAA0B7D,OAAO,CAACoF,eAArD,CAAzB;AACD,GANoD,CAQrD;;;AACA,MAAIpF,OAAO,CAAC6D,cAAR,KAA2B7D,OAAO,CAACqK,kBAAR,IAA8BrK,OAAO,CAACsK,oBAAjE,CAAJ,EAA4F;AAC1FtK,IAAAA,OAAO,CAAC6D,cAAR,CAAuB0G,IAAvB,GAA8BvK,OAAO,CAACqK,kBAAR,IAA8BrK,OAAO,CAACsK,oBAApE;AACD,GAXoD,CAarD;;;AACA,MAAItK,OAAO,CAACwK,mBAAZ,EAAiC;AAC/BxK,IAAAA,OAAO,CAAC6D,cAAR,CAAuB2G,mBAAvB,GAA6CxK,OAAO,CAACwK,mBAArD;AACD,GAhBoD,CAkBrD;;;AACA,MAAIxK,OAAO,CAACyD,eAAR,IAA2B,IAA/B,EAAqCzD,OAAO,CAACyD,eAAR,GAA0B,CAA1B;AACrC,MAAIzD,OAAO,CAAC0D,gBAAR,IAA4B,IAAhC,EAAsC1D,OAAO,CAAC0D,gBAAR,GAA2B,KAA3B;;AAEtC,MAAI,CAAC6C,kBAAkB,CAACC,aAAxB,EAAuC;AACrC;AACD,GAxBoD,CA0BrD;;;AACA,SAAOxG,OAAO,CAACmE,OAAR,CAAgBsG,GAAhB,CAAoBC,SAAS,IAAI;AACtC,WAAOA,SAAS,CAACC,aAAV,GACH,IAAIjM,MAAJ,CAAWgM,SAAS,CAACC,aAArB,EAAoC,KAApC,EAA2C3K,OAA3C,CADG,GAEH,IAAItB,MAAJ,CAAWgM,SAAS,CAACE,IAArB,EAA2BF,SAAS,CAACG,IAArC,EAA2C7K,OAA3C,CAFJ;AAGD,GAJM,CAAP;AAKD;;AAED8K,MAAM,CAACC,OAAP,GAAiB;AAAEhL,EAAAA,YAAF;AAAgBsC,EAAAA;AAAhB,CAAjB","sourcesContent":["'use strict';\n\nconst deprecate = require('util').deprecate;\nconst Logger = require('../core').Logger;\nconst MongoCredentials = require('../core').MongoCredentials;\nconst MongoError = require('../core').MongoError;\nconst Mongos = require('../topologies/mongos');\nconst NativeTopology = require('../topologies/native_topology');\nconst parse = require('../core').parseConnectionString;\nconst ReadConcern = require('../read_concern');\nconst ReadPreference = require('../core').ReadPreference;\nconst ReplSet = require('../topologies/replset');\nconst Server = require('../topologies/server');\nconst ServerSessionPool = require('../core').Sessions.ServerSessionPool;\nconst emitDeprecationWarning = require('../utils').emitDeprecationWarning;\nconst fs = require('fs');\nconst BSON = require('../core/connection/utils').retrieveBSON();\nconst CMAP_EVENT_NAMES = require('../cmap/events').CMAP_EVENT_NAMES;\n\nlet client;\nfunction loadClient() {\n  if (!client) {\n    client = require('../mongo_client');\n  }\n  return client;\n}\n\nconst legacyParse = deprecate(\n  require('../url_parser'),\n  'current URL string parser is deprecated, and will be removed in a future version. ' +\n    'To use the new parser, pass option { useNewUrlParser: true } to MongoClient.connect.'\n);\n\nconst AUTH_MECHANISM_INTERNAL_MAP = {\n  DEFAULT: 'default',\n  PLAIN: 'plain',\n  GSSAPI: 'gssapi',\n  'MONGODB-CR': 'mongocr',\n  'MONGODB-X509': 'x509',\n  'MONGODB-AWS': 'mongodb-aws',\n  'SCRAM-SHA-1': 'scram-sha-1',\n  'SCRAM-SHA-256': 'scram-sha-256'\n};\n\nconst monitoringEvents = [\n  'timeout',\n  'close',\n  'serverOpening',\n  'serverDescriptionChanged',\n  'serverHeartbeatStarted',\n  'serverHeartbeatSucceeded',\n  'serverHeartbeatFailed',\n  'serverClosed',\n  'topologyOpening',\n  'topologyClosed',\n  'topologyDescriptionChanged',\n  'commandStarted',\n  'commandSucceeded',\n  'commandFailed',\n  'joined',\n  'left',\n  'ping',\n  'ha',\n  'all',\n  'fullsetup',\n  'open'\n];\n\nconst VALID_AUTH_MECHANISMS = new Set([\n  'DEFAULT',\n  'PLAIN',\n  'GSSAPI',\n  'MONGODB-CR',\n  'MONGODB-X509',\n  'MONGODB-AWS',\n  'SCRAM-SHA-1',\n  'SCRAM-SHA-256'\n]);\n\nconst validOptionNames = [\n  'poolSize',\n  'ssl',\n  'sslValidate',\n  'sslCA',\n  'sslCert',\n  'sslKey',\n  'sslPass',\n  'sslCRL',\n  'autoReconnect',\n  'noDelay',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'connectTimeoutMS',\n  'family',\n  'socketTimeoutMS',\n  'reconnectTries',\n  'reconnectInterval',\n  'ha',\n  'haInterval',\n  'replicaSet',\n  'secondaryAcceptableLatencyMS',\n  'acceptableLatencyMS',\n  'connectWithNoPrimary',\n  'authSource',\n  'w',\n  'wtimeout',\n  'j',\n  'forceServerObjectId',\n  'serializeFunctions',\n  'ignoreUndefined',\n  'raw',\n  'bufferMaxEntries',\n  'readPreference',\n  'pkFactory',\n  'promiseLibrary',\n  'readConcern',\n  'maxStalenessSeconds',\n  'loggerLevel',\n  'logger',\n  'promoteValues',\n  'promoteBuffers',\n  'promoteLongs',\n  'domainsEnabled',\n  'checkServerIdentity',\n  'validateOptions',\n  'appname',\n  'auth',\n  'user',\n  'password',\n  'authMechanism',\n  'compression',\n  'fsync',\n  'readPreferenceTags',\n  'numberOfRetries',\n  'auto_reconnect',\n  'minSize',\n  'monitorCommands',\n  'retryWrites',\n  'retryReads',\n  'useNewUrlParser',\n  'useUnifiedTopology',\n  'serverSelectionTimeoutMS',\n  'useRecoveryToken',\n  'autoEncryption',\n  'driverInfo',\n  'tls',\n  'tlsInsecure',\n  'tlsinsecure',\n  'tlsAllowInvalidCertificates',\n  'tlsAllowInvalidHostnames',\n  'tlsCAFile',\n  'tlsCertificateFile',\n  'tlsCertificateKeyFile',\n  'tlsCertificateKeyFilePassword',\n  'minHeartbeatFrequencyMS',\n  'heartbeatFrequencyMS',\n  'directConnection',\n  'appName',\n\n  // CMAP options\n  'maxPoolSize',\n  'minPoolSize',\n  'maxIdleTimeMS',\n  'waitQueueTimeoutMS'\n];\n\nconst ignoreOptionNames = ['native_parser'];\nconst legacyOptionNames = ['server', 'replset', 'replSet', 'mongos', 'db'];\n\n// Validate options object\nfunction validOptions(options) {\n  const _validOptions = validOptionNames.concat(legacyOptionNames);\n\n  for (const name in options) {\n    if (ignoreOptionNames.indexOf(name) !== -1) {\n      continue;\n    }\n\n    if (_validOptions.indexOf(name) === -1) {\n      if (options.validateOptions) {\n        return new MongoError(`option ${name} is not supported`);\n      } else {\n        console.warn(`the options [${name}] is not supported`);\n      }\n    }\n\n    if (legacyOptionNames.indexOf(name) !== -1) {\n      console.warn(\n        `the server/replset/mongos/db options are deprecated, ` +\n          `all their options are supported at the top level of the options object [${validOptionNames}]`\n      );\n    }\n  }\n}\n\nconst LEGACY_OPTIONS_MAP = validOptionNames.reduce((obj, name) => {\n  obj[name.toLowerCase()] = name;\n  return obj;\n}, {});\n\nfunction addListeners(mongoClient, topology) {\n  topology.on('authenticated', createListener(mongoClient, 'authenticated'));\n  topology.on('error', createListener(mongoClient, 'error'));\n  topology.on('timeout', createListener(mongoClient, 'timeout'));\n  topology.on('close', createListener(mongoClient, 'close'));\n  topology.on('parseError', createListener(mongoClient, 'parseError'));\n  topology.once('open', createListener(mongoClient, 'open'));\n  topology.once('fullsetup', createListener(mongoClient, 'fullsetup'));\n  topology.once('all', createListener(mongoClient, 'all'));\n  topology.on('reconnect', createListener(mongoClient, 'reconnect'));\n}\n\nfunction assignTopology(client, topology) {\n  client.topology = topology;\n\n  if (!(topology instanceof NativeTopology)) {\n    topology.s.sessionPool = new ServerSessionPool(topology.s.coreTopology);\n  }\n}\n\n// Clear out all events\nfunction clearAllEvents(topology) {\n  monitoringEvents.forEach(event => topology.removeAllListeners(event));\n}\n\n// Collect all events in order from SDAM\nfunction collectEvents(mongoClient, topology) {\n  let MongoClient = loadClient();\n  const collectedEvents = [];\n\n  if (mongoClient instanceof MongoClient) {\n    monitoringEvents.forEach(event => {\n      topology.on(event, (object1, object2) => {\n        if (event === 'open') {\n          collectedEvents.push({ event: event, object1: mongoClient });\n        } else {\n          collectedEvents.push({ event: event, object1: object1, object2: object2 });\n        }\n      });\n    });\n  }\n\n  return collectedEvents;\n}\n\nfunction resolveTLSOptions(options) {\n  if (options.tls == null) {\n    return;\n  }\n\n  ['sslCA', 'sslKey', 'sslCert'].forEach(optionName => {\n    if (options[optionName]) {\n      options[optionName] = fs.readFileSync(options[optionName]);\n    }\n  });\n}\n\nconst emitDeprecationForNonUnifiedTopology = deprecate(() => {},\n'current Server Discovery and Monitoring engine is deprecated, and will be removed in a future version. ' + 'To use the new Server Discover and Monitoring engine, pass option { useUnifiedTopology: true } to the MongoClient constructor.');\n\nfunction connect(mongoClient, url, options, callback) {\n  options = Object.assign({}, options);\n\n  // If callback is null throw an exception\n  if (callback == null) {\n    throw new Error('no callback function provided');\n  }\n\n  let didRequestAuthentication = false;\n  const logger = Logger('MongoClient', options);\n\n  // Did we pass in a Server/ReplSet/Mongos\n  if (url instanceof Server || url instanceof ReplSet || url instanceof Mongos) {\n    return connectWithUrl(mongoClient, url, options, connectCallback);\n  }\n\n  const useNewUrlParser = options.useNewUrlParser !== false;\n\n  const parseFn = useNewUrlParser ? parse : legacyParse;\n  const transform = useNewUrlParser ? transformUrlOptions : legacyTransformUrlOptions;\n\n  parseFn(url, options, (err, _object) => {\n    // Do not attempt to connect if parsing error\n    if (err) return callback(err);\n\n    // Flatten\n    const object = transform(_object);\n\n    // Parse the string\n    const _finalOptions = createUnifiedOptions(object, options);\n\n    // Check if we have connection and socket timeout set\n    if (_finalOptions.socketTimeoutMS == null) _finalOptions.socketTimeoutMS = 0;\n    if (_finalOptions.connectTimeoutMS == null) _finalOptions.connectTimeoutMS = 10000;\n    if (_finalOptions.retryWrites == null) _finalOptions.retryWrites = true;\n    if (_finalOptions.useRecoveryToken == null) _finalOptions.useRecoveryToken = true;\n    if (_finalOptions.readPreference == null) _finalOptions.readPreference = 'primary';\n\n    if (_finalOptions.db_options && _finalOptions.db_options.auth) {\n      delete _finalOptions.db_options.auth;\n    }\n\n    // `journal` should be translated to `j` for the driver\n    if (_finalOptions.journal != null) {\n      _finalOptions.j = _finalOptions.journal;\n      _finalOptions.journal = undefined;\n    }\n\n    // resolve tls options if needed\n    resolveTLSOptions(_finalOptions);\n\n    // Store the merged options object\n    mongoClient.s.options = _finalOptions;\n\n    // Failure modes\n    if (object.servers.length === 0) {\n      return callback(new Error('connection string must contain at least one seed host'));\n    }\n\n    if (_finalOptions.auth && !_finalOptions.credentials) {\n      try {\n        didRequestAuthentication = true;\n        _finalOptions.credentials = generateCredentials(\n          mongoClient,\n          _finalOptions.auth.user,\n          _finalOptions.auth.password,\n          _finalOptions\n        );\n      } catch (err) {\n        return callback(err);\n      }\n    }\n\n    if (_finalOptions.useUnifiedTopology) {\n      return createTopology(mongoClient, 'unified', _finalOptions, connectCallback);\n    }\n\n    emitDeprecationForNonUnifiedTopology();\n\n    // Do we have a replicaset then skip discovery and go straight to connectivity\n    if (_finalOptions.replicaSet || _finalOptions.rs_name) {\n      return createTopology(mongoClient, 'replicaset', _finalOptions, connectCallback);\n    } else if (object.servers.length > 1) {\n      return createTopology(mongoClient, 'mongos', _finalOptions, connectCallback);\n    } else {\n      return createServer(mongoClient, _finalOptions, connectCallback);\n    }\n  });\n\n  function connectCallback(err, topology) {\n    const warningMessage = `seed list contains no mongos proxies, replicaset connections requires the parameter replicaSet to be supplied in the URI or options object, mongodb://server:port/db?replicaSet=name`;\n    if (err && err.message === 'no mongos proxies found in seed list') {\n      if (logger.isWarn()) {\n        logger.warn(warningMessage);\n      }\n\n      // Return a more specific error message for MongoClient.connect\n      return callback(new MongoError(warningMessage));\n    }\n\n    if (didRequestAuthentication) {\n      mongoClient.emit('authenticated', null, true);\n    }\n\n    // Return the error and db instance\n    callback(err, topology);\n  }\n}\n\nfunction connectWithUrl(mongoClient, url, options, connectCallback) {\n  // Set the topology\n  assignTopology(mongoClient, url);\n\n  // Add listeners\n  addListeners(mongoClient, url);\n\n  // Propagate the events to the client\n  relayEvents(mongoClient, url);\n\n  let finalOptions = Object.assign({}, options);\n\n  // If we have a readPreference passed in by the db options, convert it from a string\n  if (typeof options.readPreference === 'string' || typeof options.read_preference === 'string') {\n    finalOptions.readPreference = new ReadPreference(\n      options.readPreference || options.read_preference\n    );\n  }\n\n  const isDoingAuth = finalOptions.user || finalOptions.password || finalOptions.authMechanism;\n  if (isDoingAuth && !finalOptions.credentials) {\n    try {\n      finalOptions.credentials = generateCredentials(\n        mongoClient,\n        finalOptions.user,\n        finalOptions.password,\n        finalOptions\n      );\n    } catch (err) {\n      return connectCallback(err, url);\n    }\n  }\n\n  return url.connect(finalOptions, connectCallback);\n}\n\nfunction createListener(mongoClient, event) {\n  const eventSet = new Set(['all', 'fullsetup', 'open', 'reconnect']);\n  return (v1, v2) => {\n    if (eventSet.has(event)) {\n      return mongoClient.emit(event, mongoClient);\n    }\n\n    mongoClient.emit(event, v1, v2);\n  };\n}\n\nfunction createServer(mongoClient, options, callback) {\n  // Pass in the promise library\n  options.promiseLibrary = mongoClient.s.promiseLibrary;\n\n  // Set default options\n  const servers = translateOptions(options);\n\n  const server = servers[0];\n\n  // Propagate the events to the client\n  const collectedEvents = collectEvents(mongoClient, server);\n\n  // Connect to topology\n  server.connect(options, (err, topology) => {\n    if (err) {\n      server.close(true);\n      return callback(err);\n    }\n    // Clear out all the collected event listeners\n    clearAllEvents(server);\n\n    // Relay all the events\n    relayEvents(mongoClient, server);\n    // Add listeners\n    addListeners(mongoClient, server);\n    // Check if we are really speaking to a mongos\n    const ismaster = topology.lastIsMaster();\n\n    // Set the topology\n    assignTopology(mongoClient, topology);\n\n    // Do we actually have a mongos\n    if (ismaster && ismaster.msg === 'isdbgrid') {\n      // Destroy the current connection\n      topology.close();\n      // Create mongos connection instead\n      return createTopology(mongoClient, 'mongos', options, callback);\n    }\n\n    // Fire all the events\n    replayEvents(mongoClient, collectedEvents);\n    // Otherwise callback\n    callback(err, topology);\n  });\n}\n\nconst DEPRECATED_UNIFIED_EVENTS = new Set([\n  'reconnect',\n  'reconnectFailed',\n  'attemptReconnect',\n  'joined',\n  'left',\n  'ping',\n  'ha',\n  'all',\n  'fullsetup',\n  'open'\n]);\n\nfunction registerDeprecatedEventNotifiers(client) {\n  client.on('newListener', eventName => {\n    if (DEPRECATED_UNIFIED_EVENTS.has(eventName)) {\n      emitDeprecationWarning(\n        `The \\`${eventName}\\` event is no longer supported by the unified topology, please read more by visiting http://bit.ly/2D8WfT6`,\n        'DeprecationWarning'\n      );\n    }\n  });\n}\n\nfunction createTopology(mongoClient, topologyType, options, callback) {\n  // Pass in the promise library\n  options.promiseLibrary = mongoClient.s.promiseLibrary;\n\n  const translationOptions = {};\n  if (topologyType === 'unified') translationOptions.createServers = false;\n\n  // Set default options\n  const servers = translateOptions(options, translationOptions);\n\n  // determine CSFLE support\n  if (options.autoEncryption != null) {\n    let AutoEncrypter;\n    try {\n      require.resolve('mongodb-client-encryption');\n    } catch (err) {\n      callback(\n        new MongoError(\n          'Auto-encryption requested, but the module is not installed. Please add `mongodb-client-encryption` as a dependency of your project'\n        )\n      );\n      return;\n    }\n\n    try {\n      let mongodbClientEncryption = require('mongodb-client-encryption');\n      if (typeof mongodbClientEncryption.extension !== 'function') {\n        callback(\n          new MongoError(\n            'loaded version of `mongodb-client-encryption` does not have property `extension`. Please make sure you are loading the correct version of `mongodb-client-encryption`'\n          )\n        );\n      }\n      AutoEncrypter = mongodbClientEncryption.extension(require('../../index')).AutoEncrypter;\n    } catch (err) {\n      callback(err);\n      return;\n    }\n\n    const mongoCryptOptions = Object.assign(\n      {\n        bson:\n          options.bson ||\n          new BSON([\n            BSON.Binary,\n            BSON.Code,\n            BSON.DBRef,\n            BSON.Decimal128,\n            BSON.Double,\n            BSON.Int32,\n            BSON.Long,\n            BSON.Map,\n            BSON.MaxKey,\n            BSON.MinKey,\n            BSON.ObjectId,\n            BSON.BSONRegExp,\n            BSON.Symbol,\n            BSON.Timestamp\n          ])\n      },\n      options.autoEncryption\n    );\n\n    options.autoEncrypter = new AutoEncrypter(mongoClient, mongoCryptOptions);\n  }\n\n  // Create the topology\n  let topology;\n  if (topologyType === 'mongos') {\n    topology = new Mongos(servers, options);\n  } else if (topologyType === 'replicaset') {\n    topology = new ReplSet(servers, options);\n  } else if (topologyType === 'unified') {\n    topology = new NativeTopology(options.servers, options);\n    registerDeprecatedEventNotifiers(mongoClient);\n  }\n\n  // Add listeners\n  addListeners(mongoClient, topology);\n\n  // Propagate the events to the client\n  relayEvents(mongoClient, topology);\n\n  // Open the connection\n  assignTopology(mongoClient, topology);\n\n  // initialize CSFLE if requested\n  if (options.autoEncrypter) {\n    options.autoEncrypter.init(err => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      topology.connect(options, err => {\n        if (err) {\n          topology.close(true);\n          callback(err);\n          return;\n        }\n\n        callback(undefined, topology);\n      });\n    });\n\n    return;\n  }\n\n  // otherwise connect normally\n  topology.connect(options, err => {\n    if (err) {\n      topology.close(true);\n      return callback(err);\n    }\n\n    callback(undefined, topology);\n    return;\n  });\n}\n\nfunction createUnifiedOptions(finalOptions, options) {\n  const childOptions = [\n    'mongos',\n    'server',\n    'db',\n    'replset',\n    'db_options',\n    'server_options',\n    'rs_options',\n    'mongos_options'\n  ];\n  const noMerge = ['readconcern', 'compression', 'autoencryption'];\n\n  for (const name in options) {\n    if (noMerge.indexOf(name.toLowerCase()) !== -1) {\n      finalOptions[name] = options[name];\n    } else if (childOptions.indexOf(name.toLowerCase()) !== -1) {\n      finalOptions = mergeOptions(finalOptions, options[name], false);\n    } else {\n      if (\n        options[name] &&\n        typeof options[name] === 'object' &&\n        !Buffer.isBuffer(options[name]) &&\n        !Array.isArray(options[name])\n      ) {\n        finalOptions = mergeOptions(finalOptions, options[name], true);\n      } else {\n        finalOptions[name] = options[name];\n      }\n    }\n  }\n\n  return finalOptions;\n}\n\nfunction generateCredentials(client, username, password, options) {\n  options = Object.assign({}, options);\n\n  // the default db to authenticate against is 'self'\n  // if authententicate is called from a retry context, it may be another one, like admin\n  const source = options.authSource || options.authdb || options.dbName;\n\n  // authMechanism\n  const authMechanismRaw = options.authMechanism || 'DEFAULT';\n  const authMechanism = authMechanismRaw.toUpperCase();\n  const mechanismProperties = options.authMechanismProperties;\n\n  if (!VALID_AUTH_MECHANISMS.has(authMechanism)) {\n    throw MongoError.create({\n      message: `authentication mechanism ${authMechanismRaw} not supported', options.authMechanism`,\n      driver: true\n    });\n  }\n\n  return new MongoCredentials({\n    mechanism: AUTH_MECHANISM_INTERNAL_MAP[authMechanism],\n    mechanismProperties,\n    source,\n    username,\n    password\n  });\n}\n\nfunction legacyTransformUrlOptions(object) {\n  return mergeOptions(createUnifiedOptions({}, object), object, false);\n}\n\nfunction mergeOptions(target, source, flatten) {\n  for (const name in source) {\n    if (source[name] && typeof source[name] === 'object' && flatten) {\n      target = mergeOptions(target, source[name], flatten);\n    } else {\n      target[name] = source[name];\n    }\n  }\n\n  return target;\n}\n\nfunction relayEvents(mongoClient, topology) {\n  const serverOrCommandEvents = [\n    // APM\n    'commandStarted',\n    'commandSucceeded',\n    'commandFailed',\n\n    // SDAM\n    'serverOpening',\n    'serverClosed',\n    'serverDescriptionChanged',\n    'serverHeartbeatStarted',\n    'serverHeartbeatSucceeded',\n    'serverHeartbeatFailed',\n    'topologyOpening',\n    'topologyClosed',\n    'topologyDescriptionChanged',\n\n    // Legacy\n    'joined',\n    'left',\n    'ping',\n    'ha'\n  ].concat(CMAP_EVENT_NAMES);\n\n  serverOrCommandEvents.forEach(event => {\n    topology.on(event, (object1, object2) => {\n      mongoClient.emit(event, object1, object2);\n    });\n  });\n}\n\n//\n// Replay any events due to single server connection switching to Mongos\n//\nfunction replayEvents(mongoClient, events) {\n  for (let i = 0; i < events.length; i++) {\n    mongoClient.emit(events[i].event, events[i].object1, events[i].object2);\n  }\n}\n\nfunction transformUrlOptions(_object) {\n  let object = Object.assign({ servers: _object.hosts }, _object.options);\n  for (let name in object) {\n    const camelCaseName = LEGACY_OPTIONS_MAP[name];\n    if (camelCaseName) {\n      object[camelCaseName] = object[name];\n    }\n  }\n\n  const hasUsername = _object.auth && _object.auth.username;\n  const hasAuthMechanism = _object.options && _object.options.authMechanism;\n  if (hasUsername || hasAuthMechanism) {\n    object.auth = Object.assign({}, _object.auth);\n    if (object.auth.db) {\n      object.authSource = object.authSource || object.auth.db;\n    }\n\n    if (object.auth.username) {\n      object.auth.user = object.auth.username;\n    }\n  }\n\n  if (_object.defaultDatabase) {\n    object.dbName = _object.defaultDatabase;\n  }\n\n  if (object.maxPoolSize) {\n    object.poolSize = object.maxPoolSize;\n  }\n\n  if (object.readConcernLevel) {\n    object.readConcern = new ReadConcern(object.readConcernLevel);\n  }\n\n  if (object.wTimeoutMS) {\n    object.wtimeout = object.wTimeoutMS;\n  }\n\n  if (_object.srvHost) {\n    object.srvHost = _object.srvHost;\n  }\n\n  return object;\n}\n\nfunction translateOptions(options, translationOptions) {\n  translationOptions = Object.assign({}, { createServers: true }, translationOptions);\n\n  // If we have a readPreference passed in by the db options\n  if (typeof options.readPreference === 'string' || typeof options.read_preference === 'string') {\n    options.readPreference = new ReadPreference(options.readPreference || options.read_preference);\n  }\n\n  // Do we have readPreference tags, add them\n  if (options.readPreference && (options.readPreferenceTags || options.read_preference_tags)) {\n    options.readPreference.tags = options.readPreferenceTags || options.read_preference_tags;\n  }\n\n  // Do we have maxStalenessSeconds\n  if (options.maxStalenessSeconds) {\n    options.readPreference.maxStalenessSeconds = options.maxStalenessSeconds;\n  }\n\n  // Set the socket and connection timeouts\n  if (options.socketTimeoutMS == null) options.socketTimeoutMS = 0;\n  if (options.connectTimeoutMS == null) options.connectTimeoutMS = 10000;\n\n  if (!translationOptions.createServers) {\n    return;\n  }\n\n  // Create server instances\n  return options.servers.map(serverObj => {\n    return serverObj.domain_socket\n      ? new Server(serverObj.domain_socket, 27017, options)\n      : new Server(serverObj.host, serverObj.port, options);\n  });\n}\n\nmodule.exports = { validOptions, connect };\n"]},"metadata":{},"sourceType":"script"}